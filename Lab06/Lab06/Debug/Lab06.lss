
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000946  000009da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800132  00800132  00000a0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c5e  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080a  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000852  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006cb  00000000  00000000  0000308b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_18>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	50 72       	andi	r21, 0x20	; 32
  6a:	65 73       	andi	r22, 0x35	; 53
  6c:	73 20       	and	r7, r3
  6e:	41 6e       	ori	r20, 0xE1	; 225
  70:	79 20       	and	r7, r9
  72:	6f 66       	ori	r22, 0x6F	; 111
  74:	20 54       	subi	r18, 0x40	; 64
  76:	68 65       	ori	r22, 0x58	; 88
  78:	73 65       	ori	r23, 0x53	; 83
  7a:	20 4b       	sbci	r18, 0xB0	; 176
  7c:	65 79       	andi	r22, 0x95	; 149
  7e:	73 0a       	sbc	r7, r19
  80:	0a 00       	.word	0x000a	; ????

00000082 <fdata2>:
  82:	20 20 20 20 54 20 2d 20 47 65 74 20 54 69 6d 65         T - Get Time
  92:	20 66 72 6f 6d 20 50 43 20 61 6e 64 20 73 65 74      from PC and set
  a2:	20 52 54 43 0a 00                                    RTC..

000000a8 <fdata3>:
  a8:	20 20 20 20 52 20 74 6f 20 52 75 6e 20 61 6e 64         R to Run and
  b8:	20 43 6f 6c 6c 65 63 74 20 44 61 74 61 0a 00 00      Collect Data...

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e6 e4       	ldi	r30, 0x46	; 70
  dc:	f9 e0       	ldi	r31, 0x09	; 9
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 33       	cpi	r26, 0x32	; 50
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a2 e3       	ldi	r26, 0x32	; 50
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ae 38       	cpi	r26, 0x8E	; 142
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  fe:	0c 94 a1 04 	jmp	0x942	; 0x942 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <isotime>:
 106:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__asc_store>
 10a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__asc_store+0x1>
 10e:	0e 94 8e 00 	call	0x11c	; 0x11c <isotime_r>
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__asc_store>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__asc_store+0x1>
 11a:	08 95       	ret

0000011c <isotime_r>:
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8c 01       	movw	r16, r24
 12a:	eb 01       	movw	r28, r22
 12c:	fc 01       	movw	r30, r24
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	84 59       	subi	r24, 0x94	; 148
 134:	98 4f       	sbci	r25, 0xF8	; 248
 136:	64 e6       	ldi	r22, 0x64	; 100
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__divmodhi4>
 13e:	9b 01       	movw	r18, r22
 140:	7c 01       	movw	r14, r24
 142:	4d e2       	ldi	r20, 0x2D	; 45
 144:	be 01       	movw	r22, r28
 146:	c9 01       	movw	r24, r18
 148:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__print_lz>
 14c:	be 01       	movw	r22, r28
 14e:	6e 5f       	subi	r22, 0xFE	; 254
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	4d e2       	ldi	r20, 0x2D	; 45
 154:	c7 01       	movw	r24, r14
 156:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__print_lz>
 15a:	be 01       	movw	r22, r28
 15c:	6b 5f       	subi	r22, 0xFB	; 251
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	f8 01       	movw	r30, r16
 162:	85 81       	ldd	r24, Z+5	; 0x05
 164:	08 2e       	mov	r0, r24
 166:	00 0c       	add	r0, r0
 168:	99 0b       	sbc	r25, r25
 16a:	4d e2       	ldi	r20, 0x2D	; 45
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__print_lz>
 172:	be 01       	movw	r22, r28
 174:	68 5f       	subi	r22, 0xF8	; 248
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	f8 01       	movw	r30, r16
 17a:	83 81       	ldd	r24, Z+3	; 0x03
 17c:	40 e2       	ldi	r20, 0x20	; 32
 17e:	08 2e       	mov	r0, r24
 180:	00 0c       	add	r0, r0
 182:	99 0b       	sbc	r25, r25
 184:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__print_lz>
 188:	be 01       	movw	r22, r28
 18a:	65 5f       	subi	r22, 0xF5	; 245
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	f8 01       	movw	r30, r16
 190:	82 81       	ldd	r24, Z+2	; 0x02
 192:	4a e3       	ldi	r20, 0x3A	; 58
 194:	08 2e       	mov	r0, r24
 196:	00 0c       	add	r0, r0
 198:	99 0b       	sbc	r25, r25
 19a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__print_lz>
 19e:	be 01       	movw	r22, r28
 1a0:	62 5f       	subi	r22, 0xF2	; 242
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	f8 01       	movw	r30, r16
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	4a e3       	ldi	r20, 0x3A	; 58
 1aa:	08 2e       	mov	r0, r24
 1ac:	00 0c       	add	r0, r0
 1ae:	99 0b       	sbc	r25, r25
 1b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__print_lz>
 1b4:	be 01       	movw	r22, r28
 1b6:	6f 5e       	subi	r22, 0xEF	; 239
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ba:	f8 01       	movw	r30, r16
 1bc:	80 81       	ld	r24, Z
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	08 2e       	mov	r0, r24
 1c2:	00 0c       	add	r0, r0
 1c4:	99 0b       	sbc	r25, r25
 1c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__print_lz>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	e6 e0       	ldi	r30, 0x06	; 6
 1d0:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__epilogue_restores__+0x18>

000001d4 <__print_lz>:
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	eb 01       	movw	r28, r22
 1dc:	14 2f       	mov	r17, r20
 1de:	6a e0       	ldi	r22, 0x0A	; 10
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__divmodhi4>
 1e6:	60 5d       	subi	r22, 0xD0	; 208
 1e8:	68 83       	st	Y, r22
 1ea:	80 5d       	subi	r24, 0xD0	; 208
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	1a 83       	std	Y+2, r17	; 0x02
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	08 95       	ret

000001f8 <main>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));

}/* i2c_stop */
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	2f 97       	sbiw	r28, 0x0f	; 15
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	0e 94 86 02 	call	0x50c	; 0x50c <usart_init>
 210:	0e 94 70 03 	call	0x6e0	; 0x6e0 <i2c_init>
 214:	78 94       	sei
 216:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <showMenu>
 21a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <uart_buffer_empty>
 21e:	88 23       	and	r24, r24
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x22>
 222:	0e 94 3b 03 	call	0x676	; 0x676 <usart_getc>
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	83 35       	cpi	r24, 0x53	; 83
 230:	91 05       	cpc	r25, r1
 232:	39 f1       	breq	.+78     	; 0x282 <main+0x8a>
 234:	84 35       	cpi	r24, 0x54	; 84
 236:	91 05       	cpc	r25, r1
 238:	21 f0       	breq	.+8      	; 0x242 <main+0x4a>
 23a:	82 35       	cpi	r24, 0x52	; 82
 23c:	91 05       	cpc	r25, r1
 23e:	71 f0       	breq	.+28     	; 0x25c <main+0x64>
 240:	33 c0       	rjmp	.+102    	; 0x2a8 <main+0xb0>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 0f 03 	call	0x61e	; 0x61e <usart_prints>
 24a:	ce 01       	movw	r24, r28
 24c:	04 96       	adiw	r24, 0x04	; 4
 24e:	0e 94 6f 01 	call	0x2de	; 0x2de <getPCTime>
 252:	ce 01       	movw	r24, r28
 254:	04 96       	adiw	r24, 0x04	; 4
 256:	0e 94 9a 01 	call	0x334	; 0x334 <setPCF8583Time>
 25a:	2c c0       	rjmp	.+88     	; 0x2b4 <main+0xbc>
 25c:	ce 01       	movw	r24, r28
 25e:	04 96       	adiw	r24, 0x04	; 4
 260:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getPCF8583Time>
 264:	ce 01       	movw	r24, r28
 266:	04 96       	adiw	r24, 0x04	; 4
 268:	0e 94 83 00 	call	0x106	; 0x106 <isotime>
 26c:	9b 83       	std	Y+3, r25	; 0x03
 26e:	8a 83       	std	Y+2, r24	; 0x02
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	9b 81       	ldd	r25, Y+3	; 0x03
 274:	0e 94 0f 03 	call	0x61e	; 0x61e <usart_prints>
 278:	89 e2       	ldi	r24, 0x29	; 41
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 0f 03 	call	0x61e	; 0x61e <usart_prints>
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <main+0xbc>
 282:	ce 01       	movw	r24, r28
 284:	04 96       	adiw	r24, 0x04	; 4
 286:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getPCF8583Time>
 28a:	ce 01       	movw	r24, r28
 28c:	04 96       	adiw	r24, 0x04	; 4
 28e:	0e 94 83 00 	call	0x106	; 0x106 <isotime>
 292:	9b 83       	std	Y+3, r25	; 0x03
 294:	8a 83       	std	Y+2, r24	; 0x02
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	9b 81       	ldd	r25, Y+3	; 0x03
 29a:	0e 94 0f 03 	call	0x61e	; 0x61e <usart_prints>
 29e:	89 e2       	ldi	r24, 0x29	; 41
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 0f 03 	call	0x61e	; 0x61e <usart_prints>
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <main+0xbc>
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 0f 03 	call	0x61e	; 0x61e <usart_prints>
 2b0:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <usart_clear>
 2b4:	b2 cf       	rjmp	.-156    	; 0x21a <main+0x22>

000002b6 <showMenu>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	88 e6       	ldi	r24, 0x68	; 104
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 be 02 	call	0x57c	; 0x57c <usart_printf>
 2c6:	82 e8       	ldi	r24, 0x82	; 130
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 be 02 	call	0x57c	; 0x57c <usart_printf>
 2ce:	88 ea       	ldi	r24, 0xA8	; 168
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 be 02 	call	0x57c	; 0x57c <usart_printf>
 2d6:	00 00       	nop
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <getPCTime>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	00 d0       	rcall	.+0      	; 0x2e4 <getPCTime+0x6>
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	9a 83       	std	Y+2, r25	; 0x02
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	9a 81       	ldd	r25, Y+2	; 0x02
 2f0:	fc 01       	movw	r30, r24
 2f2:	17 82       	std	Z+7, r1	; 0x07
 2f4:	16 82       	std	Z+6, r1	; 0x06
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	23 e0       	ldi	r18, 0x03	; 3
 2fc:	fc 01       	movw	r30, r24
 2fe:	25 83       	std	Z+5, r18	; 0x05
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	9a 81       	ldd	r25, Y+2	; 0x02
 304:	29 e0       	ldi	r18, 0x09	; 9
 306:	fc 01       	movw	r30, r24
 308:	23 83       	std	Z+3, r18	; 0x03
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	22 e1       	ldi	r18, 0x12	; 18
 310:	fc 01       	movw	r30, r24
 312:	22 83       	std	Z+2, r18	; 0x02
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	28 e3       	ldi	r18, 0x38	; 56
 31a:	fc 01       	movw	r30, r24
 31c:	21 83       	std	Z+1, r18	; 0x01
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	9a 81       	ldd	r25, Y+2	; 0x02
 322:	2c e2       	ldi	r18, 0x2C	; 44
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
 328:	00 00       	nop
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <setPCF8583Time>:
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	00 d0       	rcall	.+0      	; 0x33c <setPCF8583Time+0x8>
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	9a 83       	std	Y+2, r25	; 0x02
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	80 ea       	ldi	r24, 0xA0	; 160
 346:	0e 94 81 03 	call	0x702	; 0x702 <i2c_start>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 356:	80 ea       	ldi	r24, 0xA0	; 160
 358:	0e 94 81 03 	call	0x702	; 0x702 <i2c_start>
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	9a 81       	ldd	r25, Y+2	; 0x02
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	0e 94 1c 04 	call	0x838	; 0x838 <to_bcd>
 36e:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	fc 01       	movw	r30, r24
 378:	81 81       	ldd	r24, Z+1	; 0x01
 37a:	0e 94 1c 04 	call	0x838	; 0x838 <to_bcd>
 37e:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	fc 01       	movw	r30, r24
 388:	82 81       	ldd	r24, Z+2	; 0x02
 38a:	0e 94 1c 04 	call	0x838	; 0x838 <to_bcd>
 38e:	8f 73       	andi	r24, 0x3F	; 63
 390:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	fc 01       	movw	r30, r24
 39a:	86 81       	ldd	r24, Z+6	; 0x06
 39c:	97 81       	ldd	r25, Z+7	; 0x07
 39e:	00 24       	eor	r0, r0
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	07 94       	ror	r0
 3a6:	96 95       	lsr	r25
 3a8:	87 95       	ror	r24
 3aa:	07 94       	ror	r0
 3ac:	98 2f       	mov	r25, r24
 3ae:	80 2d       	mov	r24, r0
 3b0:	18 2f       	mov	r17, r24
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	9a 81       	ldd	r25, Y+2	; 0x02
 3b6:	fc 01       	movw	r30, r24
 3b8:	80 85       	ldd	r24, Z+8	; 0x08
 3ba:	91 85       	ldd	r25, Z+9	; 0x09
 3bc:	0e 94 1c 04 	call	0x838	; 0x838 <to_bcd>
 3c0:	81 0f       	add	r24, r17
 3c2:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ca:	fc 01       	movw	r30, r24
 3cc:	85 81       	ldd	r24, Z+5	; 0x05
 3ce:	0e 94 1c 04 	call	0x838	; 0x838 <to_bcd>
 3d2:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 3d6:	80 ea       	ldi	r24, 0xA0	; 160
 3d8:	0e 94 81 03 	call	0x702	; 0x702 <i2c_start>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 3e8:	00 00       	nop
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	08 95       	ret

000003f6 <getPCF8583Time>:
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <getPCF8583Time+0x6>
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	9a 83       	std	Y+2, r25	; 0x02
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	80 ea       	ldi	r24, 0xA0	; 160
 406:	0e 94 81 03 	call	0x702	; 0x702 <i2c_start>
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	0e 94 c6 03 	call	0x78c	; 0x78c <i2c_write>
 410:	81 ea       	ldi	r24, 0xA1	; 161
 412:	0e 94 81 03 	call	0x702	; 0x702 <i2c_start>
 416:	0e 94 ee 03 	call	0x7dc	; 0x7dc <i2c_readAck>
 41a:	0e 94 48 04 	call	0x890	; 0x890 <from_bcd>
 41e:	28 2f       	mov	r18, r24
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
 428:	0e 94 ee 03 	call	0x7dc	; 0x7dc <i2c_readAck>
 42c:	0e 94 48 04 	call	0x890	; 0x890 <from_bcd>
 430:	28 2f       	mov	r18, r24
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	fc 01       	movw	r30, r24
 438:	21 83       	std	Z+1, r18	; 0x01
 43a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <i2c_readAck>
 43e:	0e 94 48 04 	call	0x890	; 0x890 <from_bcd>
 442:	28 2f       	mov	r18, r24
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	9a 81       	ldd	r25, Y+2	; 0x02
 448:	fc 01       	movw	r30, r24
 44a:	22 83       	std	Z+2, r18	; 0x02
 44c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <i2c_readAck>
 450:	8f 73       	andi	r24, 0x3F	; 63
 452:	0e 94 48 04 	call	0x890	; 0x890 <from_bcd>
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	9a 81       	ldd	r25, Y+2	; 0x02
 45e:	fc 01       	movw	r30, r24
 460:	31 87       	std	Z+9, r19	; 0x09
 462:	20 87       	std	Z+8, r18	; 0x08
 464:	0e 94 05 04 	call	0x80a	; 0x80a <i2c_readNak>
 468:	0e 94 48 04 	call	0x890	; 0x890 <from_bcd>
 46c:	28 2f       	mov	r18, r24
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	9a 81       	ldd	r25, Y+2	; 0x02
 472:	fc 01       	movw	r30, r24
 474:	25 83       	std	Z+5, r18	; 0x05
 476:	00 00       	nop
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <__vector_18>:
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	1f 92       	push	r1
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	86 ec       	ldi	r24, 0xC6	; 198
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	fc 01       	movw	r30, r24
 4a8:	80 81       	ld	r24, Z
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 4b0:	88 2f       	mov	r24, r24
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	8c 5c       	subi	r24, 0xCC	; 204
 4b6:	9e 4f       	sbci	r25, 0xFE	; 254
 4b8:	29 81       	ldd	r18, Y+1	; 0x01
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
 4be:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 4c2:	8f 33       	cpi	r24, 0x3F	; 63
 4c4:	19 f4       	brne	.+6      	; 0x4cc <__vector_18+0x4a>
 4c6:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__vector_18+0x54>
 4cc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 4d6:	00 00       	nop
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	2f 91       	pop	r18
 4e8:	0f 90       	pop	r0
 4ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <usart_clear>:
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 500:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_buffer_tail>
 504:	00 00       	nop
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <usart_init>:
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	00 d0       	rcall	.+0      	; 0x512 <usart_init+0x6>
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	87 e6       	ldi	r24, 0x67	; 103
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	9a 83       	std	Y+2, r25	; 0x02
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	85 ec       	ldi	r24, 0xC5	; 197
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	fc 01       	movw	r30, r24
 524:	10 82       	st	Z, r1
 526:	84 ec       	ldi	r24, 0xC4	; 196
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	29 81       	ldd	r18, Y+1	; 0x01
 52c:	fc 01       	movw	r30, r24
 52e:	20 83       	st	Z, r18
 530:	81 ec       	ldi	r24, 0xC1	; 193
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	28 e9       	ldi	r18, 0x98	; 152
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
 53a:	82 ec       	ldi	r24, 0xC2	; 194
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	26 e0       	ldi	r18, 0x06	; 6
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
 544:	8a e2       	ldi	r24, 0x2A	; 42
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	2a e2       	ldi	r18, 0x2A	; 42
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	22 60       	ori	r18, 0x02	; 2
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
 556:	8a e2       	ldi	r24, 0x2A	; 42
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	2a e2       	ldi	r18, 0x2A	; 42
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	20 81       	ld	r18, Z
 562:	2e 7f       	andi	r18, 0xFE	; 254
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
 568:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
 56c:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <rx_buffer_tail>
 570:	00 00       	nop
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <usart_printf>:
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	29 97       	sbiw	r28, 0x09	; 9
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	99 87       	std	Y+9, r25	; 0x09
 592:	88 87       	std	Y+8, r24	; 0x08
 594:	13 c0       	rjmp	.+38     	; 0x5bc <usart_printf+0x40>
 596:	88 85       	ldd	r24, Y+8	; 0x08
 598:	99 85       	ldd	r25, Y+9	; 0x09
 59a:	9c 01       	movw	r18, r24
 59c:	2f 5f       	subi	r18, 0xFF	; 255
 59e:	3f 4f       	sbci	r19, 0xFF	; 255
 5a0:	39 87       	std	Y+9, r19	; 0x09
 5a2:	28 87       	std	Y+8, r18	; 0x08
 5a4:	9d 83       	std	Y+5, r25	; 0x05
 5a6:	8c 83       	std	Y+4, r24	; 0x04
 5a8:	8c 81       	ldd	r24, Y+4	; 0x04
 5aa:	9d 81       	ldd	r25, Y+5	; 0x05
 5ac:	fc 01       	movw	r30, r24
 5ae:	84 91       	lpm	r24, Z
 5b0:	8e 83       	std	Y+6, r24	; 0x06
 5b2:	8e 81       	ldd	r24, Y+6	; 0x06
 5b4:	8f 83       	std	Y+7, r24	; 0x07
 5b6:	8f 81       	ldd	r24, Y+7	; 0x07
 5b8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <usart_putc>
 5bc:	88 85       	ldd	r24, Y+8	; 0x08
 5be:	99 85       	ldd	r25, Y+9	; 0x09
 5c0:	9a 83       	std	Y+2, r25	; 0x02
 5c2:	89 83       	std	Y+1, r24	; 0x01
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	9a 81       	ldd	r25, Y+2	; 0x02
 5c8:	fc 01       	movw	r30, r24
 5ca:	84 91       	lpm	r24, Z
 5cc:	8b 83       	std	Y+3, r24	; 0x03
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	88 23       	and	r24, r24
 5d2:	09 f7       	brne	.-62     	; 0x596 <usart_printf+0x1a>
 5d4:	00 00       	nop
 5d6:	29 96       	adiw	r28, 0x09	; 9
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <usart_putc>:
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	1f 92       	push	r1
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	00 00       	nop
 5f6:	80 ec       	ldi	r24, 0xC0	; 192
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	fc 01       	movw	r30, r24
 5fc:	80 81       	ld	r24, Z
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	80 72       	andi	r24, 0x20	; 32
 604:	99 27       	eor	r25, r25
 606:	89 2b       	or	r24, r25
 608:	b1 f3       	breq	.-20     	; 0x5f6 <usart_putc+0xe>
 60a:	86 ec       	ldi	r24, 0xC6	; 198
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	29 81       	ldd	r18, Y+1	; 0x01
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
 614:	00 00       	nop
 616:	0f 90       	pop	r0
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <usart_prints>:
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	00 d0       	rcall	.+0      	; 0x624 <usart_prints+0x6>
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	9a 83       	std	Y+2, r25	; 0x02
 62a:	89 83       	std	Y+1, r24	; 0x01
 62c:	18 c0       	rjmp	.+48     	; 0x65e <usart_prints+0x40>
 62e:	00 00       	nop
 630:	80 ec       	ldi	r24, 0xC0	; 192
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	fc 01       	movw	r30, r24
 636:	80 81       	ld	r24, Z
 638:	88 2f       	mov	r24, r24
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	80 72       	andi	r24, 0x20	; 32
 63e:	99 27       	eor	r25, r25
 640:	89 2b       	or	r24, r25
 642:	b1 f3       	breq	.-20     	; 0x630 <usart_prints+0x12>
 644:	26 ec       	ldi	r18, 0xC6	; 198
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	ac 01       	movw	r20, r24
 64e:	4f 5f       	subi	r20, 0xFF	; 255
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	5a 83       	std	Y+2, r21	; 0x02
 654:	49 83       	std	Y+1, r20	; 0x01
 656:	fc 01       	movw	r30, r24
 658:	80 81       	ld	r24, Z
 65a:	f9 01       	movw	r30, r18
 65c:	80 83       	st	Z, r24
 65e:	89 81       	ldd	r24, Y+1	; 0x01
 660:	9a 81       	ldd	r25, Y+2	; 0x02
 662:	fc 01       	movw	r30, r24
 664:	80 81       	ld	r24, Z
 666:	88 23       	and	r24, r24
 668:	11 f7       	brne	.-60     	; 0x62e <usart_prints+0x10>
 66a:	00 00       	nop
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <usart_getc>:
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	1f 92       	push	r1
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	00 00       	nop
 682:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <rx_buffer_tail>
 686:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 68a:	98 17       	cp	r25, r24
 68c:	d1 f3       	breq	.-12     	; 0x682 <usart_getc+0xc>
 68e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <rx_buffer_tail>
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	8c 5c       	subi	r24, 0xCC	; 204
 698:	9e 4f       	sbci	r25, 0xFE	; 254
 69a:	fc 01       	movw	r30, r24
 69c:	80 81       	ld	r24, Z
 69e:	89 83       	std	Y+1, r24	; 0x01
 6a0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <rx_buffer_tail>
 6a4:	8f 33       	cpi	r24, 0x3F	; 63
 6a6:	19 f4       	brne	.+6      	; 0x6ae <usart_getc+0x38>
 6a8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <rx_buffer_tail>
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <usart_getc+0x42>
 6ae:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <rx_buffer_tail>
 6b2:	8f 5f       	subi	r24, 0xFF	; 255
 6b4:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_buffer_tail>
 6b8:	89 81       	ldd	r24, Y+1	; 0x01
 6ba:	0f 90       	pop	r0
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <uart_buffer_empty>:
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <rx_buffer_tail>
 6ce:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <__data_end>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	29 17       	cp	r18, r25
 6d6:	09 f0       	breq	.+2      	; 0x6da <uart_buffer_empty+0x18>
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <i2c_init>:
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62
 6e8:	89 eb       	ldi	r24, 0xB9	; 185
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	fc 01       	movw	r30, r24
 6ee:	10 82       	st	Z, r1
 6f0:	88 eb       	ldi	r24, 0xB8	; 184
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	28 e4       	ldi	r18, 0x48	; 72
 6f6:	fc 01       	movw	r30, r24
 6f8:	20 83       	st	Z, r18
 6fa:	00 00       	nop
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <i2c_start>:
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	00 d0       	rcall	.+0      	; 0x708 <i2c_start+0x6>
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	8a 83       	std	Y+2, r24	; 0x02
 70e:	8c eb       	ldi	r24, 0xBC	; 188
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	24 ea       	ldi	r18, 0xA4	; 164
 714:	fc 01       	movw	r30, r24
 716:	20 83       	st	Z, r18
 718:	00 00       	nop
 71a:	8c eb       	ldi	r24, 0xBC	; 188
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	fc 01       	movw	r30, r24
 720:	80 81       	ld	r24, Z
 722:	88 23       	and	r24, r24
 724:	d4 f7       	brge	.-12     	; 0x71a <i2c_start+0x18>
 726:	89 eb       	ldi	r24, 0xB9	; 185
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	fc 01       	movw	r30, r24
 72c:	80 81       	ld	r24, Z
 72e:	88 7f       	andi	r24, 0xF8	; 248
 730:	89 83       	std	Y+1, r24	; 0x01
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	88 30       	cpi	r24, 0x08	; 8
 736:	29 f0       	breq	.+10     	; 0x742 <i2c_start+0x40>
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	80 31       	cpi	r24, 0x10	; 16
 73c:	11 f0       	breq	.+4      	; 0x742 <i2c_start+0x40>
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	20 c0       	rjmp	.+64     	; 0x782 <i2c_start+0x80>
 742:	8b eb       	ldi	r24, 0xBB	; 187
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	2a 81       	ldd	r18, Y+2	; 0x02
 748:	fc 01       	movw	r30, r24
 74a:	20 83       	st	Z, r18
 74c:	8c eb       	ldi	r24, 0xBC	; 188
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	24 e8       	ldi	r18, 0x84	; 132
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18
 756:	00 00       	nop
 758:	8c eb       	ldi	r24, 0xBC	; 188
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	fc 01       	movw	r30, r24
 75e:	80 81       	ld	r24, Z
 760:	88 23       	and	r24, r24
 762:	d4 f7       	brge	.-12     	; 0x758 <i2c_start+0x56>
 764:	89 eb       	ldi	r24, 0xB9	; 185
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	fc 01       	movw	r30, r24
 76a:	80 81       	ld	r24, Z
 76c:	88 7f       	andi	r24, 0xF8	; 248
 76e:	89 83       	std	Y+1, r24	; 0x01
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	88 31       	cpi	r24, 0x18	; 24
 774:	29 f0       	breq	.+10     	; 0x780 <i2c_start+0x7e>
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	80 34       	cpi	r24, 0x40	; 64
 77a:	11 f0       	breq	.+4      	; 0x780 <i2c_start+0x7e>
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	01 c0       	rjmp	.+2      	; 0x782 <i2c_start+0x80>
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	00 d0       	rcall	.+0      	; 0x792 <i2c_write+0x6>
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 798:	8b eb       	ldi	r24, 0xBB	; 187
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	2a 81       	ldd	r18, Y+2	; 0x02
 79e:	fc 01       	movw	r30, r24
 7a0:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 7a2:	8c eb       	ldi	r24, 0xBC	; 188
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	24 e8       	ldi	r18, 0x84	; 132
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 7ac:	00 00       	nop
 7ae:	8c eb       	ldi	r24, 0xBC	; 188
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	fc 01       	movw	r30, r24
 7b4:	80 81       	ld	r24, Z
 7b6:	88 23       	and	r24, r24
 7b8:	d4 f7       	brge	.-12     	; 0x7ae <i2c_write+0x22>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 7ba:	89 eb       	ldi	r24, 0xB9	; 185
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	fc 01       	movw	r30, r24
 7c0:	80 81       	ld	r24, Z
 7c2:	88 7f       	andi	r24, 0xF8	; 248
 7c4:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	88 32       	cpi	r24, 0x28	; 40
 7ca:	11 f0       	breq	.+4      	; 0x7d0 <i2c_write+0x44>
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <i2c_write+0x46>
	return 0;
 7d0:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	08 95       	ret

000007dc <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 7e4:	8c eb       	ldi	r24, 0xBC	; 188
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	24 ec       	ldi	r18, 0xC4	; 196
 7ea:	fc 01       	movw	r30, r24
 7ec:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));    
 7ee:	00 00       	nop
 7f0:	8c eb       	ldi	r24, 0xBC	; 188
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	fc 01       	movw	r30, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	88 23       	and	r24, r24
 7fa:	d4 f7       	brge	.-12     	; 0x7f0 <i2c_readAck+0x14>

    return TWDR;
 7fc:	8b eb       	ldi	r24, 0xBB	; 187
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	fc 01       	movw	r30, r24
 802:	80 81       	ld	r24, Z

}/* i2c_readAck */
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
 812:	8c eb       	ldi	r24, 0xBC	; 188
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	24 e8       	ldi	r18, 0x84	; 132
 818:	fc 01       	movw	r30, r24
 81a:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
 81c:	00 00       	nop
 81e:	8c eb       	ldi	r24, 0xBC	; 188
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	fc 01       	movw	r30, r24
 824:	80 81       	ld	r24, Z
 826:	88 23       	and	r24, r24
 828:	d4 f7       	brge	.-12     	; 0x81e <i2c_readNak+0x14>
	
    return TWDR;
 82a:	8b eb       	ldi	r24, 0xBB	; 187
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	fc 01       	movw	r30, r24
 830:	80 81       	ld	r24, Z

}/* i2c_readNak */
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <to_bcd>:

uint8_t to_bcd(uint8_t in) {
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	1f 92       	push	r1
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
 842:	89 83       	std	Y+1, r24	; 0x01
	return (in % 10) | ((in / 10) << 4);
 844:	99 81       	ldd	r25, Y+1	; 0x01
 846:	8d ec       	ldi	r24, 0xCD	; 205
 848:	98 9f       	mul	r25, r24
 84a:	81 2d       	mov	r24, r1
 84c:	11 24       	eor	r1, r1
 84e:	86 95       	lsr	r24
 850:	86 95       	lsr	r24
 852:	86 95       	lsr	r24
 854:	88 0f       	add	r24, r24
 856:	28 2f       	mov	r18, r24
 858:	22 0f       	add	r18, r18
 85a:	22 0f       	add	r18, r18
 85c:	82 0f       	add	r24, r18
 85e:	29 2f       	mov	r18, r25
 860:	28 1b       	sub	r18, r24
 862:	82 2f       	mov	r24, r18
 864:	28 2f       	mov	r18, r24
 866:	99 81       	ldd	r25, Y+1	; 0x01
 868:	8d ec       	ldi	r24, 0xCD	; 205
 86a:	98 9f       	mul	r25, r24
 86c:	81 2d       	mov	r24, r1
 86e:	11 24       	eor	r1, r1
 870:	86 95       	lsr	r24
 872:	86 95       	lsr	r24
 874:	86 95       	lsr	r24
 876:	88 2f       	mov	r24, r24
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	82 95       	swap	r24
 87c:	92 95       	swap	r25
 87e:	90 7f       	andi	r25, 0xF0	; 240
 880:	98 27       	eor	r25, r24
 882:	80 7f       	andi	r24, 0xF0	; 240
 884:	98 27       	eor	r25, r24
 886:	82 2b       	or	r24, r18
}
 888:	0f 90       	pop	r0
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	08 95       	ret

00000890 <from_bcd>:

uint8_t from_bcd(uint8_t in) {
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	1f 92       	push	r1
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
 89a:	89 83       	std	Y+1, r24	; 0x01
	return (in & 0x0F) + 10 * (in >> 4);
 89c:	89 81       	ldd	r24, Y+1	; 0x01
 89e:	98 2f       	mov	r25, r24
 8a0:	9f 70       	andi	r25, 0x0F	; 15
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	82 95       	swap	r24
 8a6:	8f 70       	andi	r24, 0x0F	; 15
 8a8:	88 0f       	add	r24, r24
 8aa:	28 2f       	mov	r18, r24
 8ac:	22 0f       	add	r18, r18
 8ae:	22 0f       	add	r18, r18
 8b0:	82 0f       	add	r24, r18
 8b2:	89 0f       	add	r24, r25
}
 8b4:	0f 90       	pop	r0
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	08 95       	ret

000008bc <__divmodhi4>:
 8bc:	97 fb       	bst	r25, 7
 8be:	07 2e       	mov	r0, r23
 8c0:	16 f4       	brtc	.+4      	; 0x8c6 <__divmodhi4+0xa>
 8c2:	00 94       	com	r0
 8c4:	07 d0       	rcall	.+14     	; 0x8d4 <__divmodhi4_neg1>
 8c6:	77 fd       	sbrc	r23, 7
 8c8:	09 d0       	rcall	.+18     	; 0x8dc <__divmodhi4_neg2>
 8ca:	0e 94 8d 04 	call	0x91a	; 0x91a <__udivmodhi4>
 8ce:	07 fc       	sbrc	r0, 7
 8d0:	05 d0       	rcall	.+10     	; 0x8dc <__divmodhi4_neg2>
 8d2:	3e f4       	brtc	.+14     	; 0x8e2 <__divmodhi4_exit>

000008d4 <__divmodhi4_neg1>:
 8d4:	90 95       	com	r25
 8d6:	81 95       	neg	r24
 8d8:	9f 4f       	sbci	r25, 0xFF	; 255
 8da:	08 95       	ret

000008dc <__divmodhi4_neg2>:
 8dc:	70 95       	com	r23
 8de:	61 95       	neg	r22
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255

000008e2 <__divmodhi4_exit>:
 8e2:	08 95       	ret

000008e4 <__epilogue_restores__>:
 8e4:	2a 88       	ldd	r2, Y+18	; 0x12
 8e6:	39 88       	ldd	r3, Y+17	; 0x11
 8e8:	48 88       	ldd	r4, Y+16	; 0x10
 8ea:	5f 84       	ldd	r5, Y+15	; 0x0f
 8ec:	6e 84       	ldd	r6, Y+14	; 0x0e
 8ee:	7d 84       	ldd	r7, Y+13	; 0x0d
 8f0:	8c 84       	ldd	r8, Y+12	; 0x0c
 8f2:	9b 84       	ldd	r9, Y+11	; 0x0b
 8f4:	aa 84       	ldd	r10, Y+10	; 0x0a
 8f6:	b9 84       	ldd	r11, Y+9	; 0x09
 8f8:	c8 84       	ldd	r12, Y+8	; 0x08
 8fa:	df 80       	ldd	r13, Y+7	; 0x07
 8fc:	ee 80       	ldd	r14, Y+6	; 0x06
 8fe:	fd 80       	ldd	r15, Y+5	; 0x05
 900:	0c 81       	ldd	r16, Y+4	; 0x04
 902:	1b 81       	ldd	r17, Y+3	; 0x03
 904:	aa 81       	ldd	r26, Y+2	; 0x02
 906:	b9 81       	ldd	r27, Y+1	; 0x01
 908:	ce 0f       	add	r28, r30
 90a:	d1 1d       	adc	r29, r1
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	ed 01       	movw	r28, r26
 918:	08 95       	ret

0000091a <__udivmodhi4>:
 91a:	aa 1b       	sub	r26, r26
 91c:	bb 1b       	sub	r27, r27
 91e:	51 e1       	ldi	r21, 0x11	; 17
 920:	07 c0       	rjmp	.+14     	; 0x930 <__udivmodhi4_ep>

00000922 <__udivmodhi4_loop>:
 922:	aa 1f       	adc	r26, r26
 924:	bb 1f       	adc	r27, r27
 926:	a6 17       	cp	r26, r22
 928:	b7 07       	cpc	r27, r23
 92a:	10 f0       	brcs	.+4      	; 0x930 <__udivmodhi4_ep>
 92c:	a6 1b       	sub	r26, r22
 92e:	b7 0b       	sbc	r27, r23

00000930 <__udivmodhi4_ep>:
 930:	88 1f       	adc	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	5a 95       	dec	r21
 936:	a9 f7       	brne	.-22     	; 0x922 <__udivmodhi4_loop>
 938:	80 95       	com	r24
 93a:	90 95       	com	r25
 93c:	bc 01       	movw	r22, r24
 93e:	cd 01       	movw	r24, r26
 940:	08 95       	ret

00000942 <_exit>:
 942:	f8 94       	cli

00000944 <__stop_program>:
 944:	ff cf       	rjmp	.-2      	; 0x944 <__stop_program>
