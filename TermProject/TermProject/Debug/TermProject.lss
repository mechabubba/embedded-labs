
TermProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800144  00800144  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000105c  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000859  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000897  00000000  00000000  00001f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000027fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  000029bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a7  00000000  00000000  00002eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000033a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  9e:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

   while(pgm_read_byte_near(ptr)) {
      c = pgm_read_byte_near(ptr++);
      usart_putc(c);
   }
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
  b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ba:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <rx_buffer_head>
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	e4 5b       	subi	r30, 0xB4	; 180
  c2:	fe 4f       	sbci	r31, 0xFE	; 254
  c4:	80 83       	st	Z, r24
  c6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rx_buffer_head>
  ca:	8f 33       	cpi	r24, 0x3F	; 63
  cc:	19 f4       	brne	.+6      	; 0xd4 <__vector_18+0x2e>
  ce:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <rx_buffer_head>
  d2:	05 c0       	rjmp	.+10     	; 0xde <__vector_18+0x38>
  d4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rx_buffer_head>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <rx_buffer_head>
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <usart_clear>:
  ee:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rx_buffer_head>
  f2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <rx_buffer_tail>
  f6:	08 95       	ret

000000f8 <usart_init>:
  f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 102:	88 e9       	ldi	r24, 0x98	; 152
 104:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	82 60       	ori	r24, 0x02	; 2
 112:	8a b9       	out	0x0a, r24	; 10
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8a b9       	out	0x0a, r24	; 10
 11a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <rx_buffer_head>
 11e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_buffer_tail>
 122:	08 95       	ret

00000124 <usart_putc>:
 124:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 128:	95 ff       	sbrs	r25, 5
 12a:	fc cf       	rjmp	.-8      	; 0x124 <usart_putc>
 12c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 130:	08 95       	ret

00000132 <usart_prints>:
   while (!(UCSR0A & (1<<UDRE0)))
   ;
   UDR0 = c;
}

void usart_prints(const char *ptr){
 132:	fc 01       	movw	r30, r24
   
   // Send NULL-terminated data from SRAM.
   // Uses polling (and it blocks).

   while(*ptr) {
 134:	07 c0       	rjmp	.+14     	; 0x144 <usart_prints+0x12>
      while (!( UCSR0A & (1<<UDRE0)))
 136:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13a:	95 ff       	sbrs	r25, 5
 13c:	fc cf       	rjmp	.-8      	; 0x136 <usart_prints+0x4>
      ;
      UDR0 = *(ptr++);
 13e:	31 96       	adiw	r30, 0x01	; 1
 140:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
void usart_prints(const char *ptr){
   
   // Send NULL-terminated data from SRAM.
   // Uses polling (and it blocks).

   while(*ptr) {
 144:	80 81       	ld	r24, Z
 146:	81 11       	cpse	r24, r1
 148:	f6 cf       	rjmp	.-20     	; 0x136 <usart_prints+0x4>
      while (!( UCSR0A & (1<<UDRE0)))
      ;
      UDR0 = *(ptr++);
   }
}
 14a:	08 95       	ret

0000014c <usart_getc>:
   
   unsigned char c;
   
   // Wait for a character in the buffer.

   while (rx_buffer_tail == rx_buffer_head)
 14c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <rx_buffer_tail>
 150:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rx_buffer_head>
 154:	98 17       	cp	r25, r24
 156:	d1 f3       	breq	.-12     	; 0x14c <usart_getc>
         ;
   
   c = rx_buffer[rx_buffer_tail];
 158:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <rx_buffer_tail>
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e4 5b       	subi	r30, 0xB4	; 180
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 81       	ld	r24, Z
   if (rx_buffer_tail == RX_BUFFER_SIZE-1)
 164:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <rx_buffer_tail>
 168:	9f 33       	cpi	r25, 0x3F	; 63
 16a:	19 f4       	brne	.+6      	; 0x172 <usart_getc+0x26>
   rx_buffer_tail = 0;
 16c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <rx_buffer_tail>
 170:	08 95       	ret
   else
   rx_buffer_tail++;
 172:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <rx_buffer_tail>
 176:	9f 5f       	subi	r25, 0xFF	; 255
 178:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <rx_buffer_tail>
   return c;
}
 17c:	08 95       	ret

0000017e <uart_buffer_empty>:

unsigned char uart_buffer_empty(void)
{
   // Returns TRUE if receive buffer is empty.
  
   return (rx_buffer_tail == rx_buffer_head);
 17e:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <rx_buffer_tail>
 182:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <rx_buffer_head>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	29 13       	cpse	r18, r25
 18a:	80 e0       	ldi	r24, 0x00	; 0
}
 18c:	08 95       	ret

0000018e <writeColor>:
    }
}

//Writes a color to the color buffer and increments cIndex.
void writeColor(uint8_t red, uint8_t green, uint8_t blue) {
	redVals[cIndex] = red;
 18e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <cIndex>
 192:	29 2f       	mov	r18, r25
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	e4 57       	subi	r30, 0x74	; 116
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	80 83       	st	Z, r24
	greenVals[cIndex] = green;
 19e:	f9 01       	movw	r30, r18
 1a0:	e0 57       	subi	r30, 0x70	; 112
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	60 83       	st	Z, r22
	blueVals[cIndex] = blue;
 1a6:	f9 01       	movw	r30, r18
 1a8:	e8 5b       	subi	r30, 0xB8	; 184
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	40 83       	st	Z, r20
	cIndex = (cIndex >= 4) ? 0 : cIndex + 1; //Increment cIndex unless it is at (or above) 7, then set it to 0.
 1ae:	94 30       	cpi	r25, 0x04	; 4
 1b0:	10 f4       	brcc	.+4      	; 0x1b6 <writeColor+0x28>
 1b2:	9f 5f       	subi	r25, 0xFF	; 255
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <writeColor+0x2a>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <cIndex>
 1bc:	08 95       	ret

000001be <getColor>:
	//cIndex will cycle forward through [0..7] before repeating.
}


//Complete function for reading color data in from the sensor and writing it into the buffer with the writeColor method.
void getColor(void) {
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
	uint8_t r = 0, g = 0, b = 0;
	i2c_start(SENSOR_ADDR+I2C_WRITE);
 1c4:	88 e3       	ldi	r24, 0x38	; 56
 1c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_start>
	i2c_write(0x00);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_write(0x01); //Turn on the color sensor.
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_stop();
 1d6:	0e 94 18 02 	call	0x430	; 0x430 <i2c_stop>
	
	//Don't know if this is enough time to wait or not.
	i2c_start(SENSOR_ADDR+I2C_WRITE);
 1da:	88 e3       	ldi	r24, 0x38	; 56
 1dc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_start>
	i2c_write(0x1C); //Access the color buffer.
 1e0:	8c e1       	ldi	r24, 0x1C	; 28
 1e2:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_start(SENSOR_ADDR+I2C_READ);
 1e6:	89 e3       	ldi	r24, 0x39	; 57
 1e8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_start>
	i2c_readAck(); //Dump the lower 8 bits as we are only storing 8-bit color channels, not 16-bit.
 1ec:	0e 94 32 02 	call	0x464	; 0x464 <i2c_readAck>
	r = i2c_readAck();
 1f0:	0e 94 32 02 	call	0x464	; 0x464 <i2c_readAck>
 1f4:	c8 2f       	mov	r28, r24
	i2c_readAck();
 1f6:	0e 94 32 02 	call	0x464	; 0x464 <i2c_readAck>
	g = i2c_readAck();
 1fa:	0e 94 32 02 	call	0x464	; 0x464 <i2c_readAck>
 1fe:	d8 2f       	mov	r29, r24
	i2c_readAck();
 200:	0e 94 32 02 	call	0x464	; 0x464 <i2c_readAck>
	b = i2c_readNak();
 204:	0e 94 3c 02 	call	0x478	; 0x478 <i2c_readNak>
 208:	18 2f       	mov	r17, r24
	
	i2c_start(SENSOR_ADDR+I2C_WRITE);
 20a:	88 e3       	ldi	r24, 0x38	; 56
 20c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_start>
	i2c_write(0x00);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_write(0x00); //Turn off the color sensor.
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_stop();
 21c:	0e 94 18 02 	call	0x430	; 0x430 <i2c_stop>
	
	writeColor(r,g,b);
 220:	41 2f       	mov	r20, r17
 222:	6d 2f       	mov	r22, r29
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 c7 00 	call	0x18e	; 0x18e <writeColor>
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	08 95       	ret

00000232 <updateLED>:

void updateLED(void) {
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
	i2c_start(LED_ADDR+I2C_WRITE);
 238:	88 ee       	ldi	r24, 0xE8	; 232
 23a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_start>
	i2c_write(0x02);
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_write(0x00); //Turn off the LEDs while we are changing the values.
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	for (uint8_t i = 0; i < 4; i++) {
 24a:	10 e0       	ldi	r17, 0x00	; 0
 24c:	14 c0       	rjmp	.+40     	; 0x276 <updateLED+0x44>
		i2c_write(redVals[i]);
 24e:	c1 2f       	mov	r28, r17
 250:	d0 e0       	ldi	r29, 0x00	; 0
 252:	fe 01       	movw	r30, r28
 254:	e4 57       	subi	r30, 0x74	; 116
 256:	fe 4f       	sbci	r31, 0xFE	; 254
 258:	80 81       	ld	r24, Z
 25a:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
		i2c_write(greenVals[i]);
 25e:	fe 01       	movw	r30, r28
 260:	e0 57       	subi	r30, 0x70	; 112
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	80 81       	ld	r24, Z
 266:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
		i2c_write(blueVals[i]);
 26a:	c8 5b       	subi	r28, 0xB8	; 184
 26c:	de 4f       	sbci	r29, 0xFE	; 254
 26e:	88 81       	ld	r24, Y
 270:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>

void updateLED(void) {
	i2c_start(LED_ADDR+I2C_WRITE);
	i2c_write(0x02);
	i2c_write(0x00); //Turn off the LEDs while we are changing the values.
	for (uint8_t i = 0; i < 4; i++) {
 274:	1f 5f       	subi	r17, 0xFF	; 255
 276:	14 30       	cpi	r17, 0x04	; 4
 278:	50 f3       	brcs	.-44     	; 0x24e <updateLED+0x1c>
		i2c_write(redVals[i]);
		i2c_write(greenVals[i]);
		i2c_write(blueVals[i]);
	}
	i2c_stop();
 27a:	0e 94 18 02 	call	0x430	; 0x430 <i2c_stop>
	
	i2c_start(LED_ADDR+I2C_WRITE);
 27e:	88 ee       	ldi	r24, 0xE8	; 232
 280:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_start>
	i2c_write(0x02);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_write(0x80); //Turn the LED back on afterwards (requires a new send as we need to go back to the previous address.)
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_stop();
 290:	0e 94 18 02 	call	0x430	; 0x430 <i2c_stop>
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	08 95       	ret

0000029c <main>:
uint8_t checkButton(void);

int main(void)
{
	//Initialization:
	usart_init();
 29c:	0e 94 7c 00 	call	0xf8	; 0xf8 <usart_init>
	for (uint8_t i = 0; i < 4; i++) writeColor(0, 0, 0); //Clear the color buffer so the LEDs don't display incorrect data.
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	06 c0       	rjmp	.+12     	; 0x2b0 <main+0x14>
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 c7 00 	call	0x18e	; 0x18e <writeColor>
 2ae:	cf 5f       	subi	r28, 0xFF	; 255
 2b0:	c4 30       	cpi	r28, 0x04	; 4
 2b2:	c0 f3       	brcs	.-16     	; 0x2a4 <main+0x8>
	DDRC |= (1 << PINC0); // button
 2b4:	87 b1       	in	r24, 0x07	; 7
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	87 b9       	out	0x07, r24	; 7
	sei();
 2ba:	78 94       	sei
	
	usart_prints("test message\r\n");
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
	
	i2c_start(SENSOR_ADDR+I2C_WRITE);
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_start>
	i2c_write(0x00);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_write(0x01); //Tell the color sensor to turn on.
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 20 02 	call	0x440	; 0x440 <i2c_write>
	i2c_stop();
 2d6:	0e 94 18 02 	call	0x430	; 0x430 <i2c_stop>

	//Main loop:
	char c; //Input character
    while (1) {
		//buttonState = (0x03 & (buttonState << 1)) | checkButton();
		if (!uart_buffer_empty() || 1) {
 2da:	0e 94 bf 00 	call	0x17e	; 0x17e <uart_buffer_empty>
			c = usart_getc();
 2de:	0e 94 a6 00 	call	0x14c	; 0x14c <usart_getc>
 2e2:	c8 2f       	mov	r28, r24
			switch (c) {
 2e4:	82 35       	cpi	r24, 0x52	; 82
 2e6:	d1 f0       	breq	.+52     	; 0x31c <main+0x80>
 2e8:	28 f4       	brcc	.+10     	; 0x2f4 <main+0x58>
 2ea:	83 34       	cpi	r24, 0x43	; 67
 2ec:	39 f1       	breq	.+78     	; 0x33c <main+0xa0>
 2ee:	87 34       	cpi	r24, 0x47	; 71
 2f0:	e9 f0       	breq	.+58     	; 0x32c <main+0x90>
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <main+0x64>
 2f4:	87 36       	cpi	r24, 0x67	; 103
 2f6:	d1 f0       	breq	.+52     	; 0x32c <main+0x90>
 2f8:	82 37       	cpi	r24, 0x72	; 114
 2fa:	81 f0       	breq	.+32     	; 0x31c <main+0x80>
 2fc:	83 36       	cpi	r24, 0x63	; 99
 2fe:	f1 f0       	breq	.+60     	; 0x33c <main+0xa0>
			default:
				usart_prints("Echo ");
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_putc(c);
 308:	8c 2f       	mov	r24, r28
 30a:	0e 94 92 00 	call	0x124	; 0x124 <usart_putc>
				usart_prints("\r\n");
 30e:	8a e3       	ldi	r24, 0x3A	; 58
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_clear();
 316:	0e 94 77 00 	call	0xee	; 0xee <usart_clear>
				break;
 31a:	56 c0       	rjmp	.+172    	; 0x3c8 <main+0x12c>
			case 'r':
			case 'R':
				writeColor(255,0,0);
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	0e 94 c7 00 	call	0x18e	; 0x18e <writeColor>
				updateLED();
 326:	0e 94 19 01 	call	0x232	; 0x232 <updateLED>
				break;
 32a:	4e c0       	rjmp	.+156    	; 0x3c8 <main+0x12c>
			case 'g':
			case 'G':
				writeColor(0,255,0);
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	6f ef       	ldi	r22, 0xFF	; 255
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 c7 00 	call	0x18e	; 0x18e <writeColor>
				updateLED();
 336:	0e 94 19 01 	call	0x232	; 0x232 <updateLED>
				break;
 33a:	46 c0       	rjmp	.+140    	; 0x3c8 <main+0x12c>
			case 'c':
			case 'C':
				usart_prints("Color 1: ");
 33c:	85 e1       	ldi	r24, 0x15	; 21
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(redVals[0]);
 344:	0f 2e       	mov	r0, r31
 346:	fc e8       	ldi	r31, 0x8C	; 140
 348:	ef 2e       	mov	r14, r31
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	ff 2e       	mov	r15, r31
 34e:	f0 2d       	mov	r31, r0
 350:	f7 01       	movw	r30, r14
 352:	80 81       	ld	r24, Z
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(", ");
 35a:	8f e1       	ldi	r24, 0x1F	; 31
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(greenVals[0]);
 362:	00 e9       	ldi	r16, 0x90	; 144
 364:	11 e0       	ldi	r17, 0x01	; 1
 366:	f8 01       	movw	r30, r16
 368:	80 81       	ld	r24, Z
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(", ");
 370:	8f e1       	ldi	r24, 0x1F	; 31
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(blueVals[0]);
 378:	c8 e4       	ldi	r28, 0x48	; 72
 37a:	d1 e0       	ldi	r29, 0x01	; 1
 37c:	88 81       	ld	r24, Y
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints("\r\n");
 384:	8a e3       	ldi	r24, 0x3A	; 58
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints("Color 2: ");
 38c:	82 e2       	ldi	r24, 0x22	; 34
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(redVals[1]);
 394:	f7 01       	movw	r30, r14
 396:	81 81       	ldd	r24, Z+1	; 0x01
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(", ");
 39e:	8f e1       	ldi	r24, 0x1F	; 31
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(greenVals[1]);
 3a6:	f8 01       	movw	r30, r16
 3a8:	81 81       	ldd	r24, Z+1	; 0x01
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(", ");
 3b0:	8f e1       	ldi	r24, 0x1F	; 31
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints(blueVals[1]);
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				usart_prints("\r\n");
 3c0:	8a e3       	ldi	r24, 0x3A	; 58
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
				
				break;
			}
			
		}
		if (buttonState == 0x01) {
 3c8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0x136>
 3d0:	84 cf       	rjmp	.-248    	; 0x2da <main+0x3e>
			usart_prints("\tPush Detected\r\n");
 3d2:	8c e2       	ldi	r24, 0x2C	; 44
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 99 00 	call	0x132	; 0x132 <usart_prints>
			getColor();
 3da:	0e 94 df 00 	call	0x1be	; 0x1be <getColor>
			updateLED();
 3de:	0e 94 19 01 	call	0x232	; 0x232 <updateLED>
 3e2:	7b cf       	rjmp	.-266    	; 0x2da <main+0x3e>

000003e4 <i2c_start>:
 3e4:	94 ea       	ldi	r25, 0xA4	; 164
 3e6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ea:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ee:	99 23       	and	r25, r25
 3f0:	e4 f7       	brge	.-8      	; 0x3ea <i2c_start+0x6>
 3f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3f6:	98 7f       	andi	r25, 0xF8	; 248
 3f8:	98 30       	cpi	r25, 0x08	; 8
 3fa:	11 f0       	breq	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	90 31       	cpi	r25, 0x10	; 16
 3fe:	91 f4       	brne	.+36     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 400:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 404:	84 e8       	ldi	r24, 0x84	; 132
 406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 40a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 40e:	88 23       	and	r24, r24
 410:	e4 f7       	brge	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 416:	88 7f       	andi	r24, 0xF8	; 248
 418:	88 31       	cpi	r24, 0x18	; 24
 41a:	31 f0       	breq	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41c:	80 34       	cpi	r24, 0x40	; 64
 41e:	31 f4       	brne	.+12     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	08 95       	ret
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	08 95       	ret

00000430 <i2c_stop>:
 430:	84 e9       	ldi	r24, 0x94	; 148
 432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 436:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 43a:	84 fd       	sbrc	r24, 4
 43c:	fc cf       	rjmp	.-8      	; 0x436 <i2c_stop+0x6>
 43e:	08 95       	ret

00000440 <i2c_write>:
 440:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 444:	84 e8       	ldi	r24, 0x84	; 132
 446:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 44a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 44e:	88 23       	and	r24, r24
 450:	e4 f7       	brge	.-8      	; 0x44a <i2c_write+0xa>
 452:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 456:	88 7f       	andi	r24, 0xF8	; 248
 458:	88 32       	cpi	r24, 0x28	; 40
 45a:	11 f0       	breq	.+4      	; 0x460 <i2c_write+0x20>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	08 95       	ret
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret

00000464 <i2c_readAck>:
 464:	84 ec       	ldi	r24, 0xC4	; 196
 466:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 46a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 46e:	88 23       	and	r24, r24
 470:	e4 f7       	brge	.-8      	; 0x46a <i2c_readAck+0x6>
 472:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 476:	08 95       	ret

00000478 <i2c_readNak>:
 478:	84 e8       	ldi	r24, 0x84	; 132
 47a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 47e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 482:	88 23       	and	r24, r24
 484:	e4 f7       	brge	.-8      	; 0x47e <i2c_readNak+0x6>
 486:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
