
TermProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  00000154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077e  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069c  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022d  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038c  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001f  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 31       	cpi	r26, 0x19	; 25
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <writeColor>:
    }
}

//Writes a color to the color buffer and increments cIndex.
void writeColor(uint8_t red, uint8_t green, uint8_t blue) {
	redVals[cIndex] = red;
  90:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  94:	29 2f       	mov	r18, r25
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	f9 01       	movw	r30, r18
  9a:	e7 5f       	subi	r30, 0xF7	; 247
  9c:	fe 4f       	sbci	r31, 0xFE	; 254
  9e:	80 83       	st	Z, r24
	greenVals[cIndex] = green;
  a0:	f9 01       	movw	r30, r18
  a2:	ef 5e       	subi	r30, 0xEF	; 239
  a4:	fe 4f       	sbci	r31, 0xFE	; 254
  a6:	60 83       	st	Z, r22
	blueVals[cIndex] = blue;
  a8:	f9 01       	movw	r30, r18
  aa:	ef 5f       	subi	r30, 0xFF	; 255
  ac:	fe 4f       	sbci	r31, 0xFE	; 254
  ae:	40 83       	st	Z, r20
	cIndex = (cIndex >= 7) ? 0 : cIndex + 1; //Increment cIndex unless it is at (or above) 7, then set it to 0.
  b0:	97 30       	cpi	r25, 0x07	; 7
  b2:	10 f4       	brcc	.+4      	; 0xb8 <writeColor+0x28>
  b4:	9f 5f       	subi	r25, 0xFF	; 255
  b6:	01 c0       	rjmp	.+2      	; 0xba <writeColor+0x2a>
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
  be:	08 95       	ret

000000c0 <main>:
uint8_t cIndex = 0; //The colors are stored in a circular buffer, and this tracks where we are in the buffer.

int main(void)
{
	//Initialization:
	for (uint8_t i = 0; i < 8; i++) writeColor(0, 0, 0); //Clear the color buffer so the LEDs don't display incorrect data.
  c0:	c0 e0       	ldi	r28, 0x00	; 0
  c2:	09 c0       	rjmp	.+18     	; 0xd6 <main+0x16>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 48 00 	call	0x90	; 0x90 <writeColor>
  d4:	cf 5f       	subi	r28, 0xFF	; 255
  d6:	c8 30       	cpi	r28, 0x08	; 8
  d8:	a8 f3       	brcs	.-22     	; 0xc4 <main+0x4>
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x1a>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
