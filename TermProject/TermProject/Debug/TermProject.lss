
TermProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00000bf0  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800228  00800228  00000dac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126a  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ef  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000996  00000000  00000000  00002a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000566  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000586  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_18>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	77 02       	muls	r23, r23
  6a:	7f 02       	muls	r23, r31
  6c:	95 02       	muls	r25, r21
  6e:	95 02       	muls	r25, r21
  70:	95 02       	muls	r25, r21
  72:	6f 02       	muls	r22, r31
  74:	95 02       	muls	r25, r21
  76:	95 02       	muls	r25, r21
  78:	95 02       	muls	r25, r21
  7a:	95 02       	muls	r25, r21
  7c:	95 02       	muls	r25, r21
  7e:	95 02       	muls	r25, r21
  80:	95 02       	muls	r25, r21
  82:	95 02       	muls	r25, r21
  84:	5f 02       	muls	r21, r31
  86:	95 02       	muls	r25, r21
  88:	67 02       	muls	r22, r23
  8a:	90 02       	muls	r25, r16
  8c:	95 02       	muls	r25, r21
  8e:	95 02       	muls	r25, r21
  90:	95 02       	muls	r25, r21
  92:	95 02       	muls	r25, r21
  94:	95 02       	muls	r25, r21
  96:	95 02       	muls	r25, r21
  98:	95 02       	muls	r25, r21
  9a:	95 02       	muls	r25, r21
  9c:	95 02       	muls	r25, r21
  9e:	95 02       	muls	r25, r21
  a0:	95 02       	muls	r25, r21
  a2:	95 02       	muls	r25, r21
  a4:	95 02       	muls	r25, r21
  a6:	95 02       	muls	r25, r21
  a8:	77 02       	muls	r23, r23
  aa:	7f 02       	muls	r23, r31
  ac:	95 02       	muls	r25, r21
  ae:	95 02       	muls	r25, r21
  b0:	95 02       	muls	r25, r21
  b2:	6f 02       	muls	r22, r31
  b4:	95 02       	muls	r25, r21
  b6:	95 02       	muls	r25, r21
  b8:	95 02       	muls	r25, r21
  ba:	95 02       	muls	r25, r21
  bc:	95 02       	muls	r25, r21
  be:	95 02       	muls	r25, r21
  c0:	95 02       	muls	r25, r21
  c2:	95 02       	muls	r25, r21
  c4:	5f 02       	muls	r21, r31
  c6:	95 02       	muls	r25, r21
  c8:	67 02       	muls	r22, r23
  ca:	90 02       	muls	r25, r16

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e0 ef       	ldi	r30, 0xF0	; 240
  e0:	fb e0       	ldi	r31, 0x0B	; 11
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 32       	cpi	r26, 0x28	; 40
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	22 e0       	ldi	r18, 0x02	; 2
  f0:	a8 e2       	ldi	r26, 0x28	; 40
  f2:	b2 e0       	ldi	r27, 0x02	; 2
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a8 37       	cpi	r26, 0x78	; 120
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
 102:	0c 94 f6 05 	jmp	0xbec	; 0xbec <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <__vector_18>:

   while(pgm_read_byte_near(ptr)) {
      c = pgm_read_byte_near(ptr++);
      usart_putc(c);
   }
}
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11e:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <rx_buffer_head>
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e0 5d       	subi	r30, 0xD0	; 208
 126:	fd 4f       	sbci	r31, 0xFD	; 253
 128:	80 83       	st	Z, r24
 12a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <rx_buffer_head>
 12e:	8f 33       	cpi	r24, 0x3F	; 63
 130:	19 f4       	brne	.+6      	; 0x138 <__vector_18+0x2e>
 132:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <rx_buffer_head>
 136:	05 c0       	rjmp	.+10     	; 0x142 <__vector_18+0x38>
 138:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <rx_buffer_head>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <rx_buffer_head>
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <usart_clear>:
 152:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <rx_buffer_head>
 156:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <rx_buffer_tail>
 15a:	08 95       	ret

0000015c <usart_init>:
 15c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 160:	87 e6       	ldi	r24, 0x67	; 103
 162:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 166:	88 e9       	ldi	r24, 0x98	; 152
 168:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	82 60       	ori	r24, 0x02	; 2
 176:	8a b9       	out	0x0a, r24	; 10
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	8a b9       	out	0x0a, r24	; 10
 17e:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <rx_buffer_head>
 182:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <rx_buffer_tail>
 186:	08 95       	ret

00000188 <usart_putc>:
 188:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18c:	95 ff       	sbrs	r25, 5
 18e:	fc cf       	rjmp	.-8      	; 0x188 <usart_putc>
 190:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 194:	08 95       	ret

00000196 <usart_prints>:
   while (!(UCSR0A & (1<<UDRE0)))
   ;
   UDR0 = c;
}

void usart_prints(const char *ptr){
 196:	fc 01       	movw	r30, r24
   
   // Send NULL-terminated data from SRAM.
   // Uses polling (and it blocks).

   while(*ptr) {
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <usart_prints+0x12>
      while (!( UCSR0A & (1<<UDRE0)))
 19a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19e:	95 ff       	sbrs	r25, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <usart_prints+0x4>
      ;
      UDR0 = *(ptr++);
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
void usart_prints(const char *ptr){
   
   // Send NULL-terminated data from SRAM.
   // Uses polling (and it blocks).

   while(*ptr) {
 1a8:	80 81       	ld	r24, Z
 1aa:	81 11       	cpse	r24, r1
 1ac:	f6 cf       	rjmp	.-20     	; 0x19a <usart_prints+0x4>
      while (!( UCSR0A & (1<<UDRE0)))
      ;
      UDR0 = *(ptr++);
   }
}
 1ae:	08 95       	ret

000001b0 <usart_getc>:
   
   unsigned char c;
   
   // Wait for a character in the buffer.

   while (rx_buffer_tail == rx_buffer_head)
 1b0:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <rx_buffer_tail>
 1b4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <rx_buffer_head>
 1b8:	98 17       	cp	r25, r24
 1ba:	d1 f3       	breq	.-12     	; 0x1b0 <usart_getc>
         ;
   
   c = rx_buffer[rx_buffer_tail];
 1bc:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <rx_buffer_tail>
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e0 5d       	subi	r30, 0xD0	; 208
 1c4:	fd 4f       	sbci	r31, 0xFD	; 253
 1c6:	80 81       	ld	r24, Z
   if (rx_buffer_tail == RX_BUFFER_SIZE-1)
 1c8:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <rx_buffer_tail>
 1cc:	9f 33       	cpi	r25, 0x3F	; 63
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <usart_getc+0x26>
   rx_buffer_tail = 0;
 1d0:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <rx_buffer_tail>
 1d4:	08 95       	ret
   else
   rx_buffer_tail++;
 1d6:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <rx_buffer_tail>
 1da:	9f 5f       	subi	r25, 0xFF	; 255
 1dc:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <rx_buffer_tail>
   return c;
}
 1e0:	08 95       	ret

000001e2 <uart_buffer_empty>:

unsigned char uart_buffer_empty(void)
{
   // Returns TRUE if receive buffer is empty.
  
   return (rx_buffer_tail == rx_buffer_head);
 1e2:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <rx_buffer_tail>
 1e6:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <rx_buffer_head>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	29 13       	cpse	r18, r25
 1ee:	80 e0       	ldi	r24, 0x00	; 0
}
 1f0:	08 95       	ret

000001f2 <writeColor>:
    }
}

//Writes a color to the color buffer and increments cIndex.
void writeColor(uint8_t red, uint8_t green, uint8_t blue) {
	redVals[cIndex] = red;
 1f2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <cIndex>
 1f6:	29 2f       	mov	r18, r25
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	e0 59       	subi	r30, 0x90	; 144
 1fe:	fd 4f       	sbci	r31, 0xFD	; 253
 200:	80 83       	st	Z, r24
	greenVals[cIndex] = green;
 202:	f9 01       	movw	r30, r18
 204:	ec 58       	subi	r30, 0x8C	; 140
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	60 83       	st	Z, r22
	blueVals[cIndex] = blue;
 20a:	f9 01       	movw	r30, r18
 20c:	e4 5d       	subi	r30, 0xD4	; 212
 20e:	fd 4f       	sbci	r31, 0xFD	; 253
 210:	40 83       	st	Z, r20
	cIndex++;
 212:	9f 5f       	subi	r25, 0xFF	; 255
 214:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <cIndex>
	if (cIndex > 3) cIndex = 0;
 218:	94 30       	cpi	r25, 0x04	; 4
 21a:	10 f0       	brcs	.+4      	; 0x220 <writeColor+0x2e>
 21c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <cIndex>
 220:	08 95       	ret

00000222 <getColor>:
	//cIndex will cycle forward through [0..3] before repeating.
}


//Complete function for reading color data in from the sensor and writing it into the buffer with the writeColor method.
void getColor(void) {
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	uint8_t r = 0, g = 0, b = 0;
	
	usart_prints("Reading color values...\t");
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
	
	if (i2c_start(SENSOR_ADDR+I2C_WRITE)) { //Reading errors
 230:	80 e7       	ldi	r24, 0x70	; 112
 232:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
 236:	88 23       	and	r24, r24
 238:	29 f0       	breq	.+10     	; 0x244 <getColor+0x22>
		usart_prints("Failed to contact sensor!\r\n");
 23a:	89 e1       	ldi	r24, 0x19	; 25
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
		return;
 242:	37 c0       	rjmp	.+110    	; 0x2b2 <getColor+0x90>
	}
	i2c_write(0x17); //Access the error register.
 244:	87 e1       	ldi	r24, 0x17	; 23
 246:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
	i2c_start(SENSOR_ADDR+I2C_READ);
 24a:	81 e7       	ldi	r24, 0x71	; 113
 24c:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
	if (i2c_readNak()) {
 250:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <i2c_readNak>
 254:	88 23       	and	r24, r24
 256:	29 f0       	breq	.+10     	; 0x262 <getColor+0x40>
		usart_prints("Color sensor error!\r\n");
 258:	85 e3       	ldi	r24, 0x35	; 53
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
		return;
 260:	28 c0       	rjmp	.+80     	; 0x2b2 <getColor+0x90>
	}
	
	if (i2c_start(SENSOR_ADDR+I2C_WRITE)) { //Reading colors
 262:	80 e7       	ldi	r24, 0x70	; 112
 264:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
 268:	88 23       	and	r24, r24
 26a:	29 f0       	breq	.+10     	; 0x276 <getColor+0x54>
		usart_prints("Failed to contact sensor!\r\n");
 26c:	89 e1       	ldi	r24, 0x19	; 25
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
		return;
 274:	1e c0       	rjmp	.+60     	; 0x2b2 <getColor+0x90>
	}
	i2c_write(0x1C); //Access the color buffer.
 276:	8c e1       	ldi	r24, 0x1C	; 28
 278:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
	i2c_start(SENSOR_ADDR+I2C_READ);
 27c:	81 e7       	ldi	r24, 0x71	; 113
 27e:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
	i2c_readAck(); //Dump the lower 8 bits as we are only storing 8-bit color channels, not 16-bit.
 282:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <i2c_readAck>
	r = i2c_readAck();
 286:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <i2c_readAck>
 28a:	c8 2f       	mov	r28, r24
	i2c_readAck();
 28c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <i2c_readAck>
	g = i2c_readAck();
 290:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <i2c_readAck>
 294:	d8 2f       	mov	r29, r24
	i2c_readAck();
 296:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <i2c_readAck>
	b = i2c_readNak();
 29a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <i2c_readNak>
 29e:	18 2f       	mov	r17, r24
	
	usart_prints("Successful!\r\n");
 2a0:	8b e4       	ldi	r24, 0x4B	; 75
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
	
	writeColor(r,g,b);
 2a8:	41 2f       	mov	r20, r17
 2aa:	6d 2f       	mov	r22, r29
 2ac:	8c 2f       	mov	r24, r28
 2ae:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <writeColor>
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	08 95       	ret

000002ba <updateLED>:

void updateLED(void) {
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
	if (i2c_start(LED_ADDR+I2C_WRITE)) {
 2c0:	88 ee       	ldi	r24, 0xE8	; 232
 2c2:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
 2c6:	88 23       	and	r24, r24
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <updateLED+0x1a>
		usart_prints("Failed to contact LED!\r\n");
 2ca:	89 e5       	ldi	r24, 0x59	; 89
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
		return;
 2d2:	2b c0       	rjmp	.+86     	; 0x32a <updateLED+0x70>
	}
	i2c_write(0x02);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
	i2c_write(0x00); //Turn off the LEDs while we are changing the values.
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
	for (uint8_t i = 0; i < 4; i++) {
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <updateLED+0x52>
		i2c_write(redVals[i]);
 2e4:	c1 2f       	mov	r28, r17
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	fe 01       	movw	r30, r28
 2ea:	e0 59       	subi	r30, 0x90	; 144
 2ec:	fd 4f       	sbci	r31, 0xFD	; 253
 2ee:	80 81       	ld	r24, Z
 2f0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_write(greenVals[i]);
 2f4:	fe 01       	movw	r30, r28
 2f6:	ec 58       	subi	r30, 0x8C	; 140
 2f8:	fd 4f       	sbci	r31, 0xFD	; 253
 2fa:	80 81       	ld	r24, Z
 2fc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_write(blueVals[i]);
 300:	c4 5d       	subi	r28, 0xD4	; 212
 302:	dd 4f       	sbci	r29, 0xFD	; 253
 304:	88 81       	ld	r24, Y
 306:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		usart_prints("Failed to contact LED!\r\n");
		return;
	}
	i2c_write(0x02);
	i2c_write(0x00); //Turn off the LEDs while we are changing the values.
	for (uint8_t i = 0; i < 4; i++) {
 30a:	1f 5f       	subi	r17, 0xFF	; 255
 30c:	14 30       	cpi	r17, 0x04	; 4
 30e:	50 f3       	brcs	.-44     	; 0x2e4 <updateLED+0x2a>
		i2c_write(redVals[i]);
		i2c_write(greenVals[i]);
		i2c_write(blueVals[i]);
	}
	i2c_stop();
 310:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_stop>
	
	i2c_start(LED_ADDR+I2C_WRITE);
 314:	88 ee       	ldi	r24, 0xE8	; 232
 316:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
	i2c_write(0x02);
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
	i2c_write(0x80); //Turn the LED back on afterwards (requires a new send as we need to go back to the previous address.)
 320:	80 e8       	ldi	r24, 0x80	; 128
 322:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
	i2c_stop();
 326:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_stop>
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	08 95       	ret

00000332 <checkButton>:

void checkButton(void) {
	uint8_t avg = 127; // pretend this is a signed int...
	for (uint8_t i = 0; i < 11; i++) {
 332:	80 e0       	ldi	r24, 0x00	; 0
	i2c_write(0x80); //Turn the LED back on afterwards (requires a new send as we need to go back to the previous address.)
	i2c_stop();
}

void checkButton(void) {
	uint8_t avg = 127; // pretend this is a signed int...
 334:	9f e7       	ldi	r25, 0x7F	; 127
	for (uint8_t i = 0; i < 11; i++) {
 336:	06 c0       	rjmp	.+12     	; 0x344 <checkButton+0x12>
		if (bit_is_clear(PINC, PINC0)) avg++;
 338:	30 99       	sbic	0x06, 0	; 6
 33a:	02 c0       	rjmp	.+4      	; 0x340 <checkButton+0xe>
 33c:	9f 5f       	subi	r25, 0xFF	; 255
 33e:	01 c0       	rjmp	.+2      	; 0x342 <checkButton+0x10>
		else avg--;
 340:	91 50       	subi	r25, 0x01	; 1
	i2c_stop();
}

void checkButton(void) {
	uint8_t avg = 127; // pretend this is a signed int...
	for (uint8_t i = 0; i < 11; i++) {
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	8b 30       	cpi	r24, 0x0B	; 11
 346:	c0 f3       	brcs	.-16     	; 0x338 <checkButton+0x6>
		if (bit_is_clear(PINC, PINC0)) avg++;
		else avg--;
	}
	buttonState <<= 1;
 348:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 34c:	88 0f       	add	r24, r24
	buttonState &= 0x02;
 34e:	82 70       	andi	r24, 0x02	; 2
 350:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
	if (avg > 127) buttonState |= 0x01;
 354:	99 23       	and	r25, r25
 356:	1c f4       	brge	.+6      	; 0x35e <checkButton+0x2c>
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
 35e:	08 95       	ret

00000360 <printColor>:
}

void printColor(uint8_t index) {
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	a0 97       	sbiw	r28, 0x20	; 32
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
	char chBuffer[32]; //Just making sure the buffer will have enough space. 
	//Including the null character, this should only be 25 chars, but it could theoretically go up to 27.
	sprintf(chBuffer,"Color %i: %i, %i, %i\r\n",index + 1, redVals[index], greenVals[index], blueVals[index]);
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	e4 5d       	subi	r30, 0xD4	; 212
 37e:	fd 4f       	sbci	r31, 0xFD	; 253
 380:	40 81       	ld	r20, Z
 382:	fc 01       	movw	r30, r24
 384:	ec 58       	subi	r30, 0x8C	; 140
 386:	fd 4f       	sbci	r31, 0xFD	; 253
 388:	30 81       	ld	r19, Z
 38a:	fc 01       	movw	r30, r24
 38c:	e0 59       	subi	r30, 0x90	; 144
 38e:	fd 4f       	sbci	r31, 0xFD	; 253
 390:	20 81       	ld	r18, Z
 392:	1f 92       	push	r1
 394:	4f 93       	push	r20
 396:	1f 92       	push	r1
 398:	3f 93       	push	r19
 39a:	1f 92       	push	r1
 39c:	2f 93       	push	r18
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	9f 93       	push	r25
 3a2:	8f 93       	push	r24
 3a4:	82 e7       	ldi	r24, 0x72	; 114
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	8e 01       	movw	r16, r28
 3ae:	0f 5f       	subi	r16, 0xFF	; 255
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
 3b2:	1f 93       	push	r17
 3b4:	0f 93       	push	r16
 3b6:	0e 94 0c 03 	call	0x618	; 0x618 <sprintf>
	usart_prints(chBuffer);
 3ba:	c8 01       	movw	r24, r16
 3bc:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
}
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	a0 96       	adiw	r28, 0x20	; 32
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	08 95       	ret

000003e0 <main>:
void checkButton(void);

int main(void)
{
	/* Initialization */
	DDRC |= (1 << PINC0); // button
 3e0:	87 b1       	in	r24, 0x07	; 7
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	87 b9       	out	0x07, r24	; 7
	
	usart_init();
 3e6:	0e 94 ae 00 	call	0x15c	; 0x15c <usart_init>
	i2c_init();
 3ea:	0e 94 ac 02 	call	0x558	; 0x558 <i2c_init>
	sei();
 3ee:	78 94       	sei
	usart_prints("Starting.\r\n");
 3f0:	89 e8       	ldi	r24, 0x89	; 137
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	81 ee       	ldi	r24, 0xE1	; 225
 3fc:	94 e0       	ldi	r25, 0x04	; 4
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x1e>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
	
	_delay_ms(100); // For the sensor???
	
	if (i2c_start(I2C_WRITE + SENSOR_ADDR)) {
 40a:	80 e7       	ldi	r24, 0x70	; 112
 40c:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
 410:	88 23       	and	r24, r24
 412:	29 f0       	breq	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		usart_prints("Failed to access sensor.\r\n");
 414:	85 e9       	ldi	r24, 0x95	; 149
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
 41c:	08 c0       	rjmp	.+16     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	} else {
		i2c_write(0x02); // 0x02 INT_FLAG
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_write(0x01); // Clear the power-on flag.
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_stop();
 42a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_stop>
	}
	if (i2c_start(I2C_WRITE + SENSOR_ADDR)) {
 42e:	80 e7       	ldi	r24, 0x70	; 112
 430:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
 434:	88 23       	and	r24, r24
 436:	29 f0       	breq	.+10     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		usart_prints("Failed to access sensor.\r\n");
 438:	85 e9       	ldi	r24, 0x95	; 149
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
 440:	0b c0       	rjmp	.+22     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	} else {
		i2c_write(0x00); // 0x00 SYSM_CTRL
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_write(0x01); // Turn on color sens function.
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_write(0x00); // Turn off cls interrupt.
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_stop();
 454:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_stop>
	}
	
	
	writeColor(255, 0, 255); // temp
 458:	4f ef       	ldi	r20, 0xFF	; 255
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <writeColor>
	char stat_led = i2c_start(I2C_WRITE + LED_ADDR);
 462:	88 ee       	ldi	r24, 0xE8	; 232
 464:	0e 94 b2 02 	call	0x564	; 0x564 <i2c_start>
	if (stat_led) {
 468:	88 23       	and	r24, r24
 46a:	29 f0       	breq	.+10     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		usart_prints("Failed to access LEDs.\r\n");
 46c:	80 eb       	ldi	r24, 0xB0	; 176
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
 474:	08 c0       	rjmp	.+16     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	} else {
		i2c_write(0x02); // 0x02 CONTROL
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_write(1 << 7); // Enable normal mode. 
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_write>
		i2c_stop();
 482:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <i2c_stop>
	}

	usart_prints("\tPress S to read in a color.\r\n");
 486:	89 ec       	ldi	r24, 0xC9	; 201
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
	usart_prints("\tPress C to print the stored colors.\r\n");
 48e:	88 ee       	ldi	r24, 0xE8	; 232
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>

	/* Main loop */
	char c; //Input character
    while (1) {
		checkButton();
 496:	0e 94 99 01 	call	0x332	; 0x332 <checkButton>
		
		if (!uart_buffer_empty()) {
 49a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <uart_buffer_empty>
 49e:	81 11       	cpse	r24, r1
 4a0:	51 c0       	rjmp	.+162    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			c = usart_getc();
 4a2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usart_getc>
 4a6:	c8 2f       	mov	r28, r24
			switch (c) {
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	e2 54       	subi	r30, 0x42	; 66
 4ae:	f1 09       	sbc	r31, r1
 4b0:	e2 33       	cpi	r30, 0x32	; 50
 4b2:	f1 05       	cpc	r31, r1
 4b4:	d0 f5       	brcc	.+116    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 4b6:	ec 5c       	subi	r30, 0xCC	; 204
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	0c 94 06 03 	jmp	0x60c	; 0x60c <__tablejump2__>
			case 'p':
			case 'P':
				usart_putc(buttonState + 0x61);
 4be:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 4c2:	8f 59       	subi	r24, 0x9F	; 159
 4c4:	0e 94 c4 00 	call	0x188	; 0x188 <usart_putc>
				usart_putc('\r');
 4c8:	8d e0       	ldi	r24, 0x0D	; 13
 4ca:	0e 94 c4 00 	call	0x188	; 0x188 <usart_putc>
			case 'r':
			case 'R': // Set red color.
				writeColor(255,0,0);
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <writeColor>
				updateLED();
 4d8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <updateLED>
				break;
 4dc:	33 c0       	rjmp	.+102    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			case 'g':
			case 'G': // Set green color.
				writeColor(0,255,0);
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	6f ef       	ldi	r22, 0xFF	; 255
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <writeColor>
				updateLED();
 4e8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <updateLED>
				break;
 4ec:	2b c0       	rjmp	.+86     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			case 'b':
			case 'B': // Set green color.
				writeColor(0,0,255);
 4ee:	4f ef       	ldi	r20, 0xFF	; 255
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <writeColor>
				updateLED();
 4f8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <updateLED>
				break;
 4fc:	23 c0       	rjmp	.+70     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			case 'c':
			case 'C': // Print colors in matrix.
				printColor(0);
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 b0 01 	call	0x360	; 0x360 <printColor>
				printColor(1);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 b0 01 	call	0x360	; 0x360 <printColor>
				printColor(2);
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 b0 01 	call	0x360	; 0x360 <printColor>
				printColor(3);
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	0e 94 b0 01 	call	0x360	; 0x360 <printColor>
				usart_prints("\r\n");
 516:	8f e6       	ldi	r24, 0x6F	; 111
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
				break;
 51e:	12 c0       	rjmp	.+36     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			case 's':
			case 'S': // Get color from sensor, set it, and update the LED.
				getColor();
 520:	0e 94 11 01 	call	0x222	; 0x222 <getColor>
				updateLED();
 524:	0e 94 5d 01 	call	0x2ba	; 0x2ba <updateLED>
				break;
 528:	0d c0       	rjmp	.+26     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			default: // Echoes chars.
				usart_prints("Echo; ");
 52a:	8f e0       	ldi	r24, 0x0F	; 15
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
				usart_putc(c);
 532:	8c 2f       	mov	r24, r28
 534:	0e 94 c4 00 	call	0x188	; 0x188 <usart_putc>
				usart_prints("\r\n");
 538:	8f e6       	ldi	r24, 0x6F	; 111
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
				usart_clear();
 540:	0e 94 a9 00 	call	0x152	; 0x152 <usart_clear>
				break;
			}
		}

		if (buttonState == 0x01) {
 544:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	09 f0       	breq	.+2      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 54c:	a4 cf       	rjmp	.-184    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			usart_prints("Button pushed.\r\n");
 54e:	86 e1       	ldi	r24, 0x16	; 22
 550:	92 e0       	ldi	r25, 0x02	; 2
 552:	0e 94 cb 00 	call	0x196	; 0x196 <usart_prints>
 556:	9f cf       	rjmp	.-194    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>

00000558 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 558:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 55c:	88 e9       	ldi	r24, 0x98	; 152
 55e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 562:	08 95       	ret

00000564 <i2c_start>:
 564:	94 ea       	ldi	r25, 0xA4	; 164
 566:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 56a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 56e:	99 23       	and	r25, r25
 570:	e4 f7       	brge	.-8      	; 0x56a <i2c_start+0x6>
 572:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 576:	98 7f       	andi	r25, 0xF8	; 248
 578:	98 30       	cpi	r25, 0x08	; 8
 57a:	11 f0       	breq	.+4      	; 0x580 <i2c_start+0x1c>
 57c:	90 31       	cpi	r25, 0x10	; 16
 57e:	91 f4       	brne	.+36     	; 0x5a4 <i2c_start+0x40>
 580:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 584:	84 e8       	ldi	r24, 0x84	; 132
 586:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 58a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 58e:	88 23       	and	r24, r24
 590:	e4 f7       	brge	.-8      	; 0x58a <i2c_start+0x26>
 592:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 596:	88 7f       	andi	r24, 0xF8	; 248
 598:	88 31       	cpi	r24, 0x18	; 24
 59a:	31 f0       	breq	.+12     	; 0x5a8 <i2c_start+0x44>
 59c:	80 34       	cpi	r24, 0x40	; 64
 59e:	31 f4       	brne	.+12     	; 0x5ac <i2c_start+0x48>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	08 95       	ret
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	08 95       	ret
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	08 95       	ret
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	08 95       	ret

000005b0 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5b0:	84 e9       	ldi	r24, 0x94	; 148
 5b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 5b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5ba:	84 fd       	sbrc	r24, 4
 5bc:	fc cf       	rjmp	.-8      	; 0x5b6 <i2c_stop+0x6>

}/* i2c_stop */
 5be:	08 95       	ret

000005c0 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 5c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 5c4:	84 e8       	ldi	r24, 0x84	; 132
 5c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 5ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5ce:	88 23       	and	r24, r24
 5d0:	e4 f7       	brge	.-8      	; 0x5ca <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 5d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5d6:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 5d8:	88 32       	cpi	r24, 0x28	; 40
 5da:	11 f0       	breq	.+4      	; 0x5e0 <i2c_write+0x20>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	08 95       	ret
	return 0;
 5e0:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 5e2:	08 95       	ret

000005e4 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 5e4:	84 ec       	ldi	r24, 0xC4	; 196
 5e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
 5ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5ee:	88 23       	and	r24, r24
 5f0:	e4 f7       	brge	.-8      	; 0x5ea <i2c_readAck+0x6>

    return TWDR;
 5f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readAck */
 5f6:	08 95       	ret

000005f8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 5f8:	84 e8       	ldi	r24, 0x84	; 132
 5fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 5fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 602:	88 23       	and	r24, r24
 604:	e4 f7       	brge	.-8      	; 0x5fe <i2c_readNak+0x6>
	
    return TWDR;
 606:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}/* i2c_readNak */
 60a:	08 95       	ret

0000060c <__tablejump2__>:
 60c:	ee 0f       	add	r30, r30
 60e:	ff 1f       	adc	r31, r31
 610:	05 90       	lpm	r0, Z+
 612:	f4 91       	lpm	r31, Z
 614:	e0 2d       	mov	r30, r0
 616:	09 94       	ijmp

00000618 <sprintf>:
 618:	ae e0       	ldi	r26, 0x0E	; 14
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	e2 e1       	ldi	r30, 0x12	; 18
 61e:	f3 e0       	ldi	r31, 0x03	; 3
 620:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__prologue_saves__+0x1c>
 624:	0d 89       	ldd	r16, Y+21	; 0x15
 626:	1e 89       	ldd	r17, Y+22	; 0x16
 628:	86 e0       	ldi	r24, 0x06	; 6
 62a:	8c 83       	std	Y+4, r24	; 0x04
 62c:	1a 83       	std	Y+2, r17	; 0x02
 62e:	09 83       	std	Y+1, r16	; 0x01
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	9f e7       	ldi	r25, 0x7F	; 127
 634:	9e 83       	std	Y+6, r25	; 0x06
 636:	8d 83       	std	Y+5, r24	; 0x05
 638:	ae 01       	movw	r20, r28
 63a:	47 5e       	subi	r20, 0xE7	; 231
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
 63e:	6f 89       	ldd	r22, Y+23	; 0x17
 640:	78 8d       	ldd	r23, Y+24	; 0x18
 642:	ce 01       	movw	r24, r28
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	0e 94 2e 03 	call	0x65c	; 0x65c <vfprintf>
 64a:	ef 81       	ldd	r30, Y+7	; 0x07
 64c:	f8 85       	ldd	r31, Y+8	; 0x08
 64e:	e0 0f       	add	r30, r16
 650:	f1 1f       	adc	r31, r17
 652:	10 82       	st	Z, r1
 654:	2e 96       	adiw	r28, 0x0e	; 14
 656:	e4 e0       	ldi	r30, 0x04	; 4
 658:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__epilogue_restores__+0x1c>

0000065c <vfprintf>:
 65c:	ab e0       	ldi	r26, 0x0B	; 11
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	e4 e3       	ldi	r30, 0x34	; 52
 662:	f3 e0       	ldi	r31, 0x03	; 3
 664:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__prologue_saves__>
 668:	6c 01       	movw	r12, r24
 66a:	7b 01       	movw	r14, r22
 66c:	8a 01       	movw	r16, r20
 66e:	fc 01       	movw	r30, r24
 670:	17 82       	std	Z+7, r1	; 0x07
 672:	16 82       	std	Z+6, r1	; 0x06
 674:	83 81       	ldd	r24, Z+3	; 0x03
 676:	81 ff       	sbrs	r24, 1
 678:	cc c1       	rjmp	.+920    	; 0xa12 <__stack+0x113>
 67a:	ce 01       	movw	r24, r28
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	3c 01       	movw	r6, r24
 680:	f6 01       	movw	r30, r12
 682:	93 81       	ldd	r25, Z+3	; 0x03
 684:	f7 01       	movw	r30, r14
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	7f 01       	movw	r14, r30
 690:	88 23       	and	r24, r24
 692:	09 f4       	brne	.+2      	; 0x696 <vfprintf+0x3a>
 694:	ba c1       	rjmp	.+884    	; 0xa0a <__stack+0x10b>
 696:	85 32       	cpi	r24, 0x25	; 37
 698:	39 f4       	brne	.+14     	; 0x6a8 <vfprintf+0x4c>
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	7f 01       	movw	r14, r30
 6a4:	85 32       	cpi	r24, 0x25	; 37
 6a6:	29 f4       	brne	.+10     	; 0x6b2 <vfprintf+0x56>
 6a8:	b6 01       	movw	r22, r12
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 6b0:	e7 cf       	rjmp	.-50     	; 0x680 <vfprintf+0x24>
 6b2:	91 2c       	mov	r9, r1
 6b4:	21 2c       	mov	r2, r1
 6b6:	31 2c       	mov	r3, r1
 6b8:	ff e1       	ldi	r31, 0x1F	; 31
 6ba:	f3 15       	cp	r31, r3
 6bc:	d8 f0       	brcs	.+54     	; 0x6f4 <vfprintf+0x98>
 6be:	8b 32       	cpi	r24, 0x2B	; 43
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <vfprintf+0x84>
 6c2:	38 f4       	brcc	.+14     	; 0x6d2 <vfprintf+0x76>
 6c4:	80 32       	cpi	r24, 0x20	; 32
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <vfprintf+0x8a>
 6c8:	83 32       	cpi	r24, 0x23	; 35
 6ca:	a1 f4       	brne	.+40     	; 0x6f4 <vfprintf+0x98>
 6cc:	23 2d       	mov	r18, r3
 6ce:	20 61       	ori	r18, 0x10	; 16
 6d0:	1d c0       	rjmp	.+58     	; 0x70c <vfprintf+0xb0>
 6d2:	8d 32       	cpi	r24, 0x2D	; 45
 6d4:	61 f0       	breq	.+24     	; 0x6ee <vfprintf+0x92>
 6d6:	80 33       	cpi	r24, 0x30	; 48
 6d8:	69 f4       	brne	.+26     	; 0x6f4 <vfprintf+0x98>
 6da:	23 2d       	mov	r18, r3
 6dc:	21 60       	ori	r18, 0x01	; 1
 6de:	16 c0       	rjmp	.+44     	; 0x70c <vfprintf+0xb0>
 6e0:	83 2d       	mov	r24, r3
 6e2:	82 60       	ori	r24, 0x02	; 2
 6e4:	38 2e       	mov	r3, r24
 6e6:	e3 2d       	mov	r30, r3
 6e8:	e4 60       	ori	r30, 0x04	; 4
 6ea:	3e 2e       	mov	r3, r30
 6ec:	2a c0       	rjmp	.+84     	; 0x742 <vfprintf+0xe6>
 6ee:	f3 2d       	mov	r31, r3
 6f0:	f8 60       	ori	r31, 0x08	; 8
 6f2:	1d c0       	rjmp	.+58     	; 0x72e <vfprintf+0xd2>
 6f4:	37 fc       	sbrc	r3, 7
 6f6:	2d c0       	rjmp	.+90     	; 0x752 <vfprintf+0xf6>
 6f8:	20 ed       	ldi	r18, 0xD0	; 208
 6fa:	28 0f       	add	r18, r24
 6fc:	2a 30       	cpi	r18, 0x0A	; 10
 6fe:	40 f0       	brcs	.+16     	; 0x710 <vfprintf+0xb4>
 700:	8e 32       	cpi	r24, 0x2E	; 46
 702:	b9 f4       	brne	.+46     	; 0x732 <vfprintf+0xd6>
 704:	36 fc       	sbrc	r3, 6
 706:	81 c1       	rjmp	.+770    	; 0xa0a <__stack+0x10b>
 708:	23 2d       	mov	r18, r3
 70a:	20 64       	ori	r18, 0x40	; 64
 70c:	32 2e       	mov	r3, r18
 70e:	19 c0       	rjmp	.+50     	; 0x742 <vfprintf+0xe6>
 710:	36 fe       	sbrs	r3, 6
 712:	06 c0       	rjmp	.+12     	; 0x720 <vfprintf+0xc4>
 714:	8a e0       	ldi	r24, 0x0A	; 10
 716:	98 9e       	mul	r9, r24
 718:	20 0d       	add	r18, r0
 71a:	11 24       	eor	r1, r1
 71c:	92 2e       	mov	r9, r18
 71e:	11 c0       	rjmp	.+34     	; 0x742 <vfprintf+0xe6>
 720:	ea e0       	ldi	r30, 0x0A	; 10
 722:	2e 9e       	mul	r2, r30
 724:	20 0d       	add	r18, r0
 726:	11 24       	eor	r1, r1
 728:	22 2e       	mov	r2, r18
 72a:	f3 2d       	mov	r31, r3
 72c:	f0 62       	ori	r31, 0x20	; 32
 72e:	3f 2e       	mov	r3, r31
 730:	08 c0       	rjmp	.+16     	; 0x742 <vfprintf+0xe6>
 732:	8c 36       	cpi	r24, 0x6C	; 108
 734:	21 f4       	brne	.+8      	; 0x73e <vfprintf+0xe2>
 736:	83 2d       	mov	r24, r3
 738:	80 68       	ori	r24, 0x80	; 128
 73a:	38 2e       	mov	r3, r24
 73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0xe6>
 73e:	88 36       	cpi	r24, 0x68	; 104
 740:	41 f4       	brne	.+16     	; 0x752 <vfprintf+0xf6>
 742:	f7 01       	movw	r30, r14
 744:	93 fd       	sbrc	r25, 3
 746:	85 91       	lpm	r24, Z+
 748:	93 ff       	sbrs	r25, 3
 74a:	81 91       	ld	r24, Z+
 74c:	7f 01       	movw	r14, r30
 74e:	81 11       	cpse	r24, r1
 750:	b3 cf       	rjmp	.-154    	; 0x6b8 <vfprintf+0x5c>
 752:	98 2f       	mov	r25, r24
 754:	9f 7d       	andi	r25, 0xDF	; 223
 756:	95 54       	subi	r25, 0x45	; 69
 758:	93 30       	cpi	r25, 0x03	; 3
 75a:	28 f4       	brcc	.+10     	; 0x766 <vfprintf+0x10a>
 75c:	0c 5f       	subi	r16, 0xFC	; 252
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	9f e3       	ldi	r25, 0x3F	; 63
 762:	99 83       	std	Y+1, r25	; 0x01
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x124>
 766:	83 36       	cpi	r24, 0x63	; 99
 768:	31 f0       	breq	.+12     	; 0x776 <vfprintf+0x11a>
 76a:	83 37       	cpi	r24, 0x73	; 115
 76c:	71 f0       	breq	.+28     	; 0x78a <vfprintf+0x12e>
 76e:	83 35       	cpi	r24, 0x53	; 83
 770:	09 f0       	breq	.+2      	; 0x774 <vfprintf+0x118>
 772:	59 c0       	rjmp	.+178    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 774:	21 c0       	rjmp	.+66     	; 0x7b8 <vfprintf+0x15c>
 776:	f8 01       	movw	r30, r16
 778:	80 81       	ld	r24, Z
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	0e 5f       	subi	r16, 0xFE	; 254
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	88 24       	eor	r8, r8
 782:	83 94       	inc	r8
 784:	91 2c       	mov	r9, r1
 786:	53 01       	movw	r10, r6
 788:	13 c0       	rjmp	.+38     	; 0x7b0 <vfprintf+0x154>
 78a:	28 01       	movw	r4, r16
 78c:	f2 e0       	ldi	r31, 0x02	; 2
 78e:	4f 0e       	add	r4, r31
 790:	51 1c       	adc	r5, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	36 fe       	sbrs	r3, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x146>
 79c:	69 2d       	mov	r22, r9
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x14a>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	0e 94 1a 05 	call	0xa34	; 0xa34 <strnlen>
 7ac:	4c 01       	movw	r8, r24
 7ae:	82 01       	movw	r16, r4
 7b0:	f3 2d       	mov	r31, r3
 7b2:	ff 77       	andi	r31, 0x7F	; 127
 7b4:	3f 2e       	mov	r3, r31
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <vfprintf+0x188>
 7b8:	28 01       	movw	r4, r16
 7ba:	22 e0       	ldi	r18, 0x02	; 2
 7bc:	42 0e       	add	r4, r18
 7be:	51 1c       	adc	r5, r1
 7c0:	f8 01       	movw	r30, r16
 7c2:	a0 80       	ld	r10, Z
 7c4:	b1 80       	ldd	r11, Z+1	; 0x01
 7c6:	36 fe       	sbrs	r3, 6
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <vfprintf+0x174>
 7ca:	69 2d       	mov	r22, r9
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x178>
 7d0:	6f ef       	ldi	r22, 0xFF	; 255
 7d2:	7f ef       	ldi	r23, 0xFF	; 255
 7d4:	c5 01       	movw	r24, r10
 7d6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <strnlen_P>
 7da:	4c 01       	movw	r8, r24
 7dc:	f3 2d       	mov	r31, r3
 7de:	f0 68       	ori	r31, 0x80	; 128
 7e0:	3f 2e       	mov	r3, r31
 7e2:	82 01       	movw	r16, r4
 7e4:	33 fc       	sbrc	r3, 3
 7e6:	1b c0       	rjmp	.+54     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7e8:	82 2d       	mov	r24, r2
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	88 16       	cp	r8, r24
 7ee:	99 06       	cpc	r9, r25
 7f0:	b0 f4       	brcc	.+44     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f2:	b6 01       	movw	r22, r12
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 7fc:	2a 94       	dec	r2
 7fe:	f4 cf       	rjmp	.-24     	; 0x7e8 <vfprintf+0x18c>
 800:	f5 01       	movw	r30, r10
 802:	37 fc       	sbrc	r3, 7
 804:	85 91       	lpm	r24, Z+
 806:	37 fe       	sbrs	r3, 7
 808:	81 91       	ld	r24, Z+
 80a:	5f 01       	movw	r10, r30
 80c:	b6 01       	movw	r22, r12
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 814:	21 10       	cpse	r2, r1
 816:	2a 94       	dec	r2
 818:	21 e0       	ldi	r18, 0x01	; 1
 81a:	82 1a       	sub	r8, r18
 81c:	91 08       	sbc	r9, r1
 81e:	81 14       	cp	r8, r1
 820:	91 04       	cpc	r9, r1
 822:	71 f7       	brne	.-36     	; 0x800 <__DATA_REGION_LENGTH__>
 824:	e8 c0       	rjmp	.+464    	; 0x9f6 <__stack+0xf7>
 826:	84 36       	cpi	r24, 0x64	; 100
 828:	11 f0       	breq	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82a:	89 36       	cpi	r24, 0x69	; 105
 82c:	41 f5       	brne	.+80     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 82e:	f8 01       	movw	r30, r16
 830:	37 fe       	sbrs	r3, 7
 832:	07 c0       	rjmp	.+14     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 834:	60 81       	ld	r22, Z
 836:	71 81       	ldd	r23, Z+1	; 0x01
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	0c 5f       	subi	r16, 0xFC	; 252
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	08 c0       	rjmp	.+16     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 842:	60 81       	ld	r22, Z
 844:	71 81       	ldd	r23, Z+1	; 0x01
 846:	07 2e       	mov	r0, r23
 848:	00 0c       	add	r0, r0
 84a:	88 0b       	sbc	r24, r24
 84c:	99 0b       	sbc	r25, r25
 84e:	0e 5f       	subi	r16, 0xFE	; 254
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	f3 2d       	mov	r31, r3
 854:	ff 76       	andi	r31, 0x6F	; 111
 856:	3f 2e       	mov	r3, r31
 858:	97 ff       	sbrs	r25, 7
 85a:	09 c0       	rjmp	.+18     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 85c:	90 95       	com	r25
 85e:	80 95       	com	r24
 860:	70 95       	com	r23
 862:	61 95       	neg	r22
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	f0 68       	ori	r31, 0x80	; 128
 86c:	3f 2e       	mov	r3, r31
 86e:	2a e0       	ldi	r18, 0x0A	; 10
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	a3 01       	movw	r20, r6
 874:	0e 94 61 05 	call	0xac2	; 0xac2 <__ultoa_invert>
 878:	88 2e       	mov	r8, r24
 87a:	86 18       	sub	r8, r6
 87c:	45 c0       	rjmp	.+138    	; 0x908 <__stack+0x9>
 87e:	85 37       	cpi	r24, 0x75	; 117
 880:	31 f4       	brne	.+12     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 882:	23 2d       	mov	r18, r3
 884:	2f 7e       	andi	r18, 0xEF	; 239
 886:	b2 2e       	mov	r11, r18
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	25 c0       	rjmp	.+74     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 88e:	93 2d       	mov	r25, r3
 890:	99 7f       	andi	r25, 0xF9	; 249
 892:	b9 2e       	mov	r11, r25
 894:	8f 36       	cpi	r24, 0x6F	; 111
 896:	c1 f0       	breq	.+48     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 898:	18 f4       	brcc	.+6      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 89a:	88 35       	cpi	r24, 0x58	; 88
 89c:	79 f0       	breq	.+30     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 89e:	b5 c0       	rjmp	.+362    	; 0xa0a <__stack+0x10b>
 8a0:	80 37       	cpi	r24, 0x70	; 112
 8a2:	19 f0       	breq	.+6      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a4:	88 37       	cpi	r24, 0x78	; 120
 8a6:	21 f0       	breq	.+8      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8a8:	b0 c0       	rjmp	.+352    	; 0xa0a <__stack+0x10b>
 8aa:	e9 2f       	mov	r30, r25
 8ac:	e0 61       	ori	r30, 0x10	; 16
 8ae:	be 2e       	mov	r11, r30
 8b0:	b4 fe       	sbrs	r11, 4
 8b2:	0d c0       	rjmp	.+26     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8b4:	fb 2d       	mov	r31, r11
 8b6:	f4 60       	ori	r31, 0x04	; 4
 8b8:	bf 2e       	mov	r11, r31
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8bc:	34 fe       	sbrs	r3, 4
 8be:	0a c0       	rjmp	.+20     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8c0:	29 2f       	mov	r18, r25
 8c2:	26 60       	ori	r18, 0x06	; 6
 8c4:	b2 2e       	mov	r11, r18
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8c8:	28 e0       	ldi	r18, 0x08	; 8
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8ce:	20 e1       	ldi	r18, 0x10	; 16
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8d4:	20 e1       	ldi	r18, 0x10	; 16
 8d6:	32 e0       	ldi	r19, 0x02	; 2
 8d8:	f8 01       	movw	r30, r16
 8da:	b7 fe       	sbrs	r11, 7
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8de:	60 81       	ld	r22, Z
 8e0:	71 81       	ldd	r23, Z+1	; 0x01
 8e2:	82 81       	ldd	r24, Z+2	; 0x02
 8e4:	93 81       	ldd	r25, Z+3	; 0x03
 8e6:	0c 5f       	subi	r16, 0xFC	; 252
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 5f       	subi	r16, 0xFE	; 254
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	a3 01       	movw	r20, r6
 8fa:	0e 94 61 05 	call	0xac2	; 0xac2 <__ultoa_invert>
 8fe:	88 2e       	mov	r8, r24
 900:	86 18       	sub	r8, r6
 902:	fb 2d       	mov	r31, r11
 904:	ff 77       	andi	r31, 0x7F	; 127
 906:	3f 2e       	mov	r3, r31
 908:	36 fe       	sbrs	r3, 6
 90a:	0d c0       	rjmp	.+26     	; 0x926 <__stack+0x27>
 90c:	23 2d       	mov	r18, r3
 90e:	2e 7f       	andi	r18, 0xFE	; 254
 910:	a2 2e       	mov	r10, r18
 912:	89 14       	cp	r8, r9
 914:	58 f4       	brcc	.+22     	; 0x92c <__stack+0x2d>
 916:	34 fe       	sbrs	r3, 4
 918:	0b c0       	rjmp	.+22     	; 0x930 <__stack+0x31>
 91a:	32 fc       	sbrc	r3, 2
 91c:	09 c0       	rjmp	.+18     	; 0x930 <__stack+0x31>
 91e:	83 2d       	mov	r24, r3
 920:	8e 7e       	andi	r24, 0xEE	; 238
 922:	a8 2e       	mov	r10, r24
 924:	05 c0       	rjmp	.+10     	; 0x930 <__stack+0x31>
 926:	b8 2c       	mov	r11, r8
 928:	a3 2c       	mov	r10, r3
 92a:	03 c0       	rjmp	.+6      	; 0x932 <__stack+0x33>
 92c:	b8 2c       	mov	r11, r8
 92e:	01 c0       	rjmp	.+2      	; 0x932 <__stack+0x33>
 930:	b9 2c       	mov	r11, r9
 932:	a4 fe       	sbrs	r10, 4
 934:	0f c0       	rjmp	.+30     	; 0x954 <__stack+0x55>
 936:	fe 01       	movw	r30, r28
 938:	e8 0d       	add	r30, r8
 93a:	f1 1d       	adc	r31, r1
 93c:	80 81       	ld	r24, Z
 93e:	80 33       	cpi	r24, 0x30	; 48
 940:	21 f4       	brne	.+8      	; 0x94a <__stack+0x4b>
 942:	9a 2d       	mov	r25, r10
 944:	99 7e       	andi	r25, 0xE9	; 233
 946:	a9 2e       	mov	r10, r25
 948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0x5d>
 94a:	a2 fe       	sbrs	r10, 2
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0x5b>
 94e:	b3 94       	inc	r11
 950:	b3 94       	inc	r11
 952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0x5d>
 954:	8a 2d       	mov	r24, r10
 956:	86 78       	andi	r24, 0x86	; 134
 958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
 95a:	b3 94       	inc	r11
 95c:	a3 fc       	sbrc	r10, 3
 95e:	11 c0       	rjmp	.+34     	; 0x982 <__stack+0x83>
 960:	a0 fe       	sbrs	r10, 0
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x71>
 964:	b2 14       	cp	r11, r2
 966:	88 f4       	brcc	.+34     	; 0x98a <__stack+0x8b>
 968:	28 0c       	add	r2, r8
 96a:	92 2c       	mov	r9, r2
 96c:	9b 18       	sub	r9, r11
 96e:	0e c0       	rjmp	.+28     	; 0x98c <__stack+0x8d>
 970:	b2 14       	cp	r11, r2
 972:	60 f4       	brcc	.+24     	; 0x98c <__stack+0x8d>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 97e:	b3 94       	inc	r11
 980:	f7 cf       	rjmp	.-18     	; 0x970 <__stack+0x71>
 982:	b2 14       	cp	r11, r2
 984:	18 f4       	brcc	.+6      	; 0x98c <__stack+0x8d>
 986:	2b 18       	sub	r2, r11
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
 98a:	98 2c       	mov	r9, r8
 98c:	21 2c       	mov	r2, r1
 98e:	a4 fe       	sbrs	r10, 4
 990:	10 c0       	rjmp	.+32     	; 0x9b2 <__stack+0xb3>
 992:	b6 01       	movw	r22, r12
 994:	80 e3       	ldi	r24, 0x30	; 48
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 99c:	a2 fe       	sbrs	r10, 2
 99e:	17 c0       	rjmp	.+46     	; 0x9ce <__stack+0xcf>
 9a0:	a1 fc       	sbrc	r10, 1
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0xab>
 9a4:	88 e7       	ldi	r24, 0x78	; 120
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	88 e5       	ldi	r24, 0x58	; 88
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	b6 01       	movw	r22, r12
 9b0:	0c c0       	rjmp	.+24     	; 0x9ca <__stack+0xcb>
 9b2:	8a 2d       	mov	r24, r10
 9b4:	86 78       	andi	r24, 0x86	; 134
 9b6:	59 f0       	breq	.+22     	; 0x9ce <__stack+0xcf>
 9b8:	a1 fe       	sbrs	r10, 1
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	8b e2       	ldi	r24, 0x2B	; 43
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__stack+0xc3>
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	a7 fc       	sbrc	r10, 7
 9c4:	8d e2       	ldi	r24, 0x2D	; 45
 9c6:	b6 01       	movw	r22, r12
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 9ce:	89 14       	cp	r8, r9
 9d0:	38 f4       	brcc	.+14     	; 0x9e0 <__stack+0xe1>
 9d2:	b6 01       	movw	r22, r12
 9d4:	80 e3       	ldi	r24, 0x30	; 48
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 9dc:	9a 94       	dec	r9
 9de:	f7 cf       	rjmp	.-18     	; 0x9ce <__stack+0xcf>
 9e0:	8a 94       	dec	r8
 9e2:	f3 01       	movw	r30, r6
 9e4:	e8 0d       	add	r30, r8
 9e6:	f1 1d       	adc	r31, r1
 9e8:	80 81       	ld	r24, Z
 9ea:	b6 01       	movw	r22, r12
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 9f2:	81 10       	cpse	r8, r1
 9f4:	f5 cf       	rjmp	.-22     	; 0x9e0 <__stack+0xe1>
 9f6:	22 20       	and	r2, r2
 9f8:	09 f4       	brne	.+2      	; 0x9fc <__stack+0xfd>
 9fa:	42 ce       	rjmp	.-892    	; 0x680 <vfprintf+0x24>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
 a06:	2a 94       	dec	r2
 a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <__stack+0xf7>
 a0a:	f6 01       	movw	r30, r12
 a0c:	86 81       	ldd	r24, Z+6	; 0x06
 a0e:	97 81       	ldd	r25, Z+7	; 0x07
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x117>
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	9f ef       	ldi	r25, 0xFF	; 255
 a16:	2b 96       	adiw	r28, 0x0b	; 11
 a18:	e2 e1       	ldi	r30, 0x12	; 18
 a1a:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__epilogue_restores__>

00000a1e <strnlen_P>:
 a1e:	fc 01       	movw	r30, r24
 a20:	05 90       	lpm	r0, Z+
 a22:	61 50       	subi	r22, 0x01	; 1
 a24:	70 40       	sbci	r23, 0x00	; 0
 a26:	01 10       	cpse	r0, r1
 a28:	d8 f7       	brcc	.-10     	; 0xa20 <strnlen_P+0x2>
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	8e 0f       	add	r24, r30
 a30:	9f 1f       	adc	r25, r31
 a32:	08 95       	ret

00000a34 <strnlen>:
 a34:	fc 01       	movw	r30, r24
 a36:	61 50       	subi	r22, 0x01	; 1
 a38:	70 40       	sbci	r23, 0x00	; 0
 a3a:	01 90       	ld	r0, Z+
 a3c:	01 10       	cpse	r0, r1
 a3e:	d8 f7       	brcc	.-10     	; 0xa36 <strnlen+0x2>
 a40:	80 95       	com	r24
 a42:	90 95       	com	r25
 a44:	8e 0f       	add	r24, r30
 a46:	9f 1f       	adc	r25, r31
 a48:	08 95       	ret

00000a4a <fputc>:
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	fb 01       	movw	r30, r22
 a54:	23 81       	ldd	r18, Z+3	; 0x03
 a56:	21 fd       	sbrc	r18, 1
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <fputc+0x16>
 a5a:	8f ef       	ldi	r24, 0xFF	; 255
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	2c c0       	rjmp	.+88     	; 0xab8 <fputc+0x6e>
 a60:	22 ff       	sbrs	r18, 2
 a62:	16 c0       	rjmp	.+44     	; 0xa90 <fputc+0x46>
 a64:	46 81       	ldd	r20, Z+6	; 0x06
 a66:	57 81       	ldd	r21, Z+7	; 0x07
 a68:	24 81       	ldd	r18, Z+4	; 0x04
 a6a:	35 81       	ldd	r19, Z+5	; 0x05
 a6c:	42 17       	cp	r20, r18
 a6e:	53 07       	cpc	r21, r19
 a70:	44 f4       	brge	.+16     	; 0xa82 <fputc+0x38>
 a72:	a0 81       	ld	r26, Z
 a74:	b1 81       	ldd	r27, Z+1	; 0x01
 a76:	9d 01       	movw	r18, r26
 a78:	2f 5f       	subi	r18, 0xFF	; 255
 a7a:	3f 4f       	sbci	r19, 0xFF	; 255
 a7c:	31 83       	std	Z+1, r19	; 0x01
 a7e:	20 83       	st	Z, r18
 a80:	8c 93       	st	X, r24
 a82:	26 81       	ldd	r18, Z+6	; 0x06
 a84:	37 81       	ldd	r19, Z+7	; 0x07
 a86:	2f 5f       	subi	r18, 0xFF	; 255
 a88:	3f 4f       	sbci	r19, 0xFF	; 255
 a8a:	37 83       	std	Z+7, r19	; 0x07
 a8c:	26 83       	std	Z+6, r18	; 0x06
 a8e:	14 c0       	rjmp	.+40     	; 0xab8 <fputc+0x6e>
 a90:	8b 01       	movw	r16, r22
 a92:	ec 01       	movw	r28, r24
 a94:	fb 01       	movw	r30, r22
 a96:	00 84       	ldd	r0, Z+8	; 0x08
 a98:	f1 85       	ldd	r31, Z+9	; 0x09
 a9a:	e0 2d       	mov	r30, r0
 a9c:	09 95       	icall
 a9e:	89 2b       	or	r24, r25
 aa0:	e1 f6       	brne	.-72     	; 0xa5a <fputc+0x10>
 aa2:	d8 01       	movw	r26, r16
 aa4:	16 96       	adiw	r26, 0x06	; 6
 aa6:	8d 91       	ld	r24, X+
 aa8:	9c 91       	ld	r25, X
 aaa:	17 97       	sbiw	r26, 0x07	; 7
 aac:	01 96       	adiw	r24, 0x01	; 1
 aae:	17 96       	adiw	r26, 0x07	; 7
 ab0:	9c 93       	st	X, r25
 ab2:	8e 93       	st	-X, r24
 ab4:	16 97       	sbiw	r26, 0x06	; 6
 ab6:	ce 01       	movw	r24, r28
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	1f 91       	pop	r17
 abe:	0f 91       	pop	r16
 ac0:	08 95       	ret

00000ac2 <__ultoa_invert>:
 ac2:	fa 01       	movw	r30, r20
 ac4:	aa 27       	eor	r26, r26
 ac6:	28 30       	cpi	r18, 0x08	; 8
 ac8:	51 f1       	breq	.+84     	; 0xb1e <__ultoa_invert+0x5c>
 aca:	20 31       	cpi	r18, 0x10	; 16
 acc:	81 f1       	breq	.+96     	; 0xb2e <__ultoa_invert+0x6c>
 ace:	e8 94       	clt
 ad0:	6f 93       	push	r22
 ad2:	6e 7f       	andi	r22, 0xFE	; 254
 ad4:	6e 5f       	subi	r22, 0xFE	; 254
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	af 4f       	sbci	r26, 0xFF	; 255
 ade:	b1 e0       	ldi	r27, 0x01	; 1
 ae0:	3e d0       	rcall	.+124    	; 0xb5e <__ultoa_invert+0x9c>
 ae2:	b4 e0       	ldi	r27, 0x04	; 4
 ae4:	3c d0       	rcall	.+120    	; 0xb5e <__ultoa_invert+0x9c>
 ae6:	67 0f       	add	r22, r23
 ae8:	78 1f       	adc	r23, r24
 aea:	89 1f       	adc	r24, r25
 aec:	9a 1f       	adc	r25, r26
 aee:	a1 1d       	adc	r26, r1
 af0:	68 0f       	add	r22, r24
 af2:	79 1f       	adc	r23, r25
 af4:	8a 1f       	adc	r24, r26
 af6:	91 1d       	adc	r25, r1
 af8:	a1 1d       	adc	r26, r1
 afa:	6a 0f       	add	r22, r26
 afc:	71 1d       	adc	r23, r1
 afe:	81 1d       	adc	r24, r1
 b00:	91 1d       	adc	r25, r1
 b02:	a1 1d       	adc	r26, r1
 b04:	20 d0       	rcall	.+64     	; 0xb46 <__ultoa_invert+0x84>
 b06:	09 f4       	brne	.+2      	; 0xb0a <__ultoa_invert+0x48>
 b08:	68 94       	set
 b0a:	3f 91       	pop	r19
 b0c:	2a e0       	ldi	r18, 0x0A	; 10
 b0e:	26 9f       	mul	r18, r22
 b10:	11 24       	eor	r1, r1
 b12:	30 19       	sub	r19, r0
 b14:	30 5d       	subi	r19, 0xD0	; 208
 b16:	31 93       	st	Z+, r19
 b18:	de f6       	brtc	.-74     	; 0xad0 <__ultoa_invert+0xe>
 b1a:	cf 01       	movw	r24, r30
 b1c:	08 95       	ret
 b1e:	46 2f       	mov	r20, r22
 b20:	47 70       	andi	r20, 0x07	; 7
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	41 93       	st	Z+, r20
 b26:	b3 e0       	ldi	r27, 0x03	; 3
 b28:	0f d0       	rcall	.+30     	; 0xb48 <__ultoa_invert+0x86>
 b2a:	c9 f7       	brne	.-14     	; 0xb1e <__ultoa_invert+0x5c>
 b2c:	f6 cf       	rjmp	.-20     	; 0xb1a <__ultoa_invert+0x58>
 b2e:	46 2f       	mov	r20, r22
 b30:	4f 70       	andi	r20, 0x0F	; 15
 b32:	40 5d       	subi	r20, 0xD0	; 208
 b34:	4a 33       	cpi	r20, 0x3A	; 58
 b36:	18 f0       	brcs	.+6      	; 0xb3e <__ultoa_invert+0x7c>
 b38:	49 5d       	subi	r20, 0xD9	; 217
 b3a:	31 fd       	sbrc	r19, 1
 b3c:	40 52       	subi	r20, 0x20	; 32
 b3e:	41 93       	st	Z+, r20
 b40:	02 d0       	rcall	.+4      	; 0xb46 <__ultoa_invert+0x84>
 b42:	a9 f7       	brne	.-22     	; 0xb2e <__ultoa_invert+0x6c>
 b44:	ea cf       	rjmp	.-44     	; 0xb1a <__ultoa_invert+0x58>
 b46:	b4 e0       	ldi	r27, 0x04	; 4
 b48:	a6 95       	lsr	r26
 b4a:	97 95       	ror	r25
 b4c:	87 95       	ror	r24
 b4e:	77 95       	ror	r23
 b50:	67 95       	ror	r22
 b52:	ba 95       	dec	r27
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__ultoa_invert+0x86>
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	61 05       	cpc	r22, r1
 b5a:	71 05       	cpc	r23, r1
 b5c:	08 95       	ret
 b5e:	9b 01       	movw	r18, r22
 b60:	ac 01       	movw	r20, r24
 b62:	0a 2e       	mov	r0, r26
 b64:	06 94       	lsr	r0
 b66:	57 95       	ror	r21
 b68:	47 95       	ror	r20
 b6a:	37 95       	ror	r19
 b6c:	27 95       	ror	r18
 b6e:	ba 95       	dec	r27
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__ultoa_invert+0xa2>
 b72:	62 0f       	add	r22, r18
 b74:	73 1f       	adc	r23, r19
 b76:	84 1f       	adc	r24, r20
 b78:	95 1f       	adc	r25, r21
 b7a:	a0 1d       	adc	r26, r0
 b7c:	08 95       	ret

00000b7e <__prologue_saves__>:
 b7e:	2f 92       	push	r2
 b80:	3f 92       	push	r3
 b82:	4f 92       	push	r4
 b84:	5f 92       	push	r5
 b86:	6f 92       	push	r6
 b88:	7f 92       	push	r7
 b8a:	8f 92       	push	r8
 b8c:	9f 92       	push	r9
 b8e:	af 92       	push	r10
 b90:	bf 92       	push	r11
 b92:	cf 92       	push	r12
 b94:	df 92       	push	r13
 b96:	ef 92       	push	r14
 b98:	ff 92       	push	r15
 b9a:	0f 93       	push	r16
 b9c:	1f 93       	push	r17
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	cd b7       	in	r28, 0x3d	; 61
 ba4:	de b7       	in	r29, 0x3e	; 62
 ba6:	ca 1b       	sub	r28, r26
 ba8:	db 0b       	sbc	r29, r27
 baa:	0f b6       	in	r0, 0x3f	; 63
 bac:	f8 94       	cli
 bae:	de bf       	out	0x3e, r29	; 62
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	cd bf       	out	0x3d, r28	; 61
 bb4:	09 94       	ijmp

00000bb6 <__epilogue_restores__>:
 bb6:	2a 88       	ldd	r2, Y+18	; 0x12
 bb8:	39 88       	ldd	r3, Y+17	; 0x11
 bba:	48 88       	ldd	r4, Y+16	; 0x10
 bbc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bbe:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc8:	b9 84       	ldd	r11, Y+9	; 0x09
 bca:	c8 84       	ldd	r12, Y+8	; 0x08
 bcc:	df 80       	ldd	r13, Y+7	; 0x07
 bce:	ee 80       	ldd	r14, Y+6	; 0x06
 bd0:	fd 80       	ldd	r15, Y+5	; 0x05
 bd2:	0c 81       	ldd	r16, Y+4	; 0x04
 bd4:	1b 81       	ldd	r17, Y+3	; 0x03
 bd6:	aa 81       	ldd	r26, Y+2	; 0x02
 bd8:	b9 81       	ldd	r27, Y+1	; 0x01
 bda:	ce 0f       	add	r28, r30
 bdc:	d1 1d       	adc	r29, r1
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	de bf       	out	0x3e, r29	; 62
 be4:	0f be       	out	0x3f, r0	; 63
 be6:	cd bf       	out	0x3d, r28	; 61
 be8:	ed 01       	movw	r28, r26
 bea:	08 95       	ret

00000bec <_exit>:
 bec:	f8 94       	cli

00000bee <__stop_program>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee <__stop_program>
